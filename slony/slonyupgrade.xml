<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->

<sect1 id="slonyupgrade">
<title>Mise à jour de &slony1;</title>
<indexterm><primary>remplacer &slony1; par une nouvelle version</primary></indexterm>

<para>
  Lorsqu'on met à jour &slony1;, chaque n&oelig;ud du cluster doit être mis à
  jour simultanément, en utilisant la commande <xref
  linkend="stmtupdatefunctions"/> de &lslonik;.
</para>

<para>
  Cela nécessite un arrêt temporaire de la réplication, mais cela n'implique
  pas obligatoirement une coupure de service au niveau des applications qui
  utilisent le cluster.
</para>

<para>
  La procédure correcte est la suivante&nbsp;:
</para>

<itemizedlist>
  <listitem>
    <para>
      Arrêtez les processus &lslon; sur chaque n&oelig;ud
      (<emphasis>c'est-à-dire</emphasis> l'ancienne version de &lslon;).
    </para>
  </listitem>

  <listitem>
    <para>
      Installez la nouvelle version du logiciel &lslon; sur tous les
      n&oelig;uds.
    </para>
  </listitem>

  <listitem>
    <para>
      Exécutez un script &lslonik; contenant la commande
      <command>update functions (id = [valeur]);</command> pour chaque
      n&oelig;ud du cluster.
    </para>

    <note>
      <para>
        Souvenez-vous que le script de mise à jour, comme tous les scripts
	&slonik; doit contenir les fonctions adéquates pour fonctionner.
      </para>
    </note>
  </listitem>
  
  <listitem>
    <para>
      Démarrez tous les démons slons.
    </para>
  </listitem>
</itemizedlist>

<para>
  Toute cette opération est relativement sûre&nbsp;: s'il y a une incohérence
  entre les versions des composants, le &lslon; refusera de démarrer, ce qui
  constitue une protection contre les corruptions.
</para>

<para>
  Vous devez vous assurer que la bibliothèque C contenant les fonctions trigger
  SPI ont été copiées à la bonne place lors de la compilation de &postgres;. Il
  existe de multiples approches pour cela&nbsp;:
</para>

<para>
  La partie la plus compliquée consiste à s'assurer que la bibliothèque C
  contenant les fonctions SPI est copiée au bon endroit lors de la compilation
  de &postgres;&nbsp;; la manière la plus simple et la plus sûre de faire cela
  consiste à avoir deux versions compilées de &postgres;, une pour chaque
  version de &slony1;, puis d'éteindre le serveur et de le relancer avec la
  <quote>nouvelle</quote> version compilée&nbsp;; cette approche implique une
  courte coupure de service sur chaque n&oelig;ud.
</para>

<para>
  Si cette approche est réputée plus simple et plus rapide, rien ne vous
  empêche de mettre en place avec précaution les composants &slony1; pour
  écraser l'ancienne version comme décrit dans l'étape d'installation. Ceci
  peut ne <emphasis>pas</emphasis> fonctionner sous Windows si Windows pose un
  verrou sur les fichiers qui sont utilisés.
</para>

<variablelist>
  <varlistentry>
    <term>Exécuter <command>make install</command> pour installer les nouveaux
    composants &slony1; au dessus des anciens.</term>

    <listitem>
      <para>
        Si vous compilez &slony1; sur le système sur où il sera déployé et
        que vous compilez à partir des sources, écraser l'ancienne version avec
        la nouvelle se fait simplement avec <command>make install</command>.
        Il n'est pas nécessaire de relancer la base de donnée, il faut juste
        arrêter les processus &slony1;, exécuter le script <command>UPDATE
        FUNCTIONS</command> et démarrer les nouveaux processus &lslon;.
      </para>

      <para>
        Malheureusement, cette approche nécessite un environnement de
	compilation sur le serveur où la mise à jour sera déployée. Ceci n'est
	pas forcément compatible avec la volonté d'utiliser des binaires
	communs à &postgres; et &slony1; sur l'ensemble des n&oelig;uds.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>Compiler à nouveau &postgres; et &slony1;</term>

    <listitem>
      <para>
        Avec cette approche, l'ancienne version de &postgres; accompagnée des
        anciens composants &slony1; est conservée après la bascule vers une
	nouvelle version de &postgres; accompagnée des nouveaux composants
	&slony1;. Afin de basculer vers la nouvelle version de &slony1;, vous
	devez redémarrer le serveur <command>postmaster</command>, ce qui
	implique l'interruption des applications. afin que le serveur soit
	informé de l'emplacement des nouveaux composants.
      </para>
    </listitem>
  </varlistentry>
</variablelist>

<sect2>
<title>Problème avec TABLE ADD KEY dans &slony1; 2.0</title> 

<para>
  Généralement, les mises à jour de versions &slony1; ne nécessitent pas de
  porter une attention particulière au réplicat existant, c'est-à-dire que vous
  pouvez simplement arrêter les &slon;s, mettre en place les binaires, lancer
  <xref linkend="stmtupdatefunctions"/> sur chaque n&oelig;ud et redémarrer
  &lslon;. Les modifications de schéma étant uniquement sur le schéma du cluster,
  <xref linkend="stmtupdatefunctions"/> est capable de réaliser toutes les
  altérations. Avec la version 2, cela change s'il existe des tables qui
  utilisaient <xref linkend="stmttableaddkey"/>. La version 2 ne supporte pas
  la colonne <quote>extra</quote>, et <quote>réparer</quote> le schéma pour
  obtenir une clé primaire correcte n'est pas dans les attributions de <xref
  linkend="stmtupdatefunctions"/>.
</para>

<para>
  Lorsque qu'on met à jour depuis une version 1.0.x, 1.1.x ou 1.2.x vers une
  version 2, il est nécessaire de supprimer toute clé primaire gérée par
  &slony1;.
</para>

<para>
  On peut identifier les tables concernées avec la requête SQL suivante&nbsp;:
  
  <command>SELECT n.nspname, c.relname FROM pg_class c,
pg_namespace n WHERE c.oid in (SELECT attrelid FROM pg_attribute WHERE
attname LIKE '_Slony-I_%rowID' and not attisdropped) and reltype &amp;lt&amp;gt 0
and n.oid = c.relnamespace order by n.nspname, c.relname;</command>

</para>

<para>
  L'approche la plus simple pour rectifier l'état de ces tables est la
  suivante&nbsp;:
</para>

<itemizedlist>

  <listitem>
    <para>
      Retirer la table de la réplication avec la commande &lslonik;
      <xref linkend="stmtsetdroptable"/>
    </para>

    <para>
      Ceci ne supprime <emphasis>pas</emphasis> les colonnes créées par
      &slony1;.
    </para>
  </listitem>

  <listitem>
    <para>
      Sur chaque n&oelig;ud, exécutez un script SQL pour modifier la table et
      supprimez les colonnes additionnelles.
    </para>
    
    <para> 
      <command>ALTER TABLE nom_table DROP COLUMN "_Slony-I_cluster-rowID";</command>
    </para>

    <para>
      Ceci doit être exécuté sur chaque n&oelig;ud. Selon votre préférence,
      vous pouvez utiliser <xref linkend="stmtddlscript"/> pour cela.
    </para>

    <para>
      Si la table est une table massivement mise à jour, sachez que cette
      modification posera un verrou exclusif sur la table. Elle ne détiendra
      pas ce verrou très longtemps&nbsp;; supprimer une colonne est une
      opération assez rapide car cela se contente de marquer la colonne comme
      supprimée. Cela ne nécessite <emphasis>pas</emphasis> de réécrire toute
      la table. Les lignes qui ont une valeur dans cette colonne continueront à
      avoir cette valeur. Pour les nouvelles lignes, la valeur sera NULL, et
      les requêtes ignoreront cette colonne. L'espace occupé par ces colonnes
      sera récupéré lorsque les lignes seront mises à jour.
    </para>

    <para>
      Notez qu'à cette étape de la procédure, cette table n'est pas répliquée.
      Si une erreur a lieu, la réplication à cet instant n'apporte aucune
      protection sur cette table. C'est dommage mais inévitable.
    </para>
  </listitem>

  <listitem>
    <para>
      Assurez-vous que la table possède un candidat éligible pour une clé
      primaire, c'est-à-dire un ensemble de colonnes NOT NULL et UNIQUE.
    </para>

    <para>
      Les différents cas possibles font que les développeurs n'ont pas fait
      d'efforts pour automatiser cette procédure.
    </para>

    <itemizedlist>
      <listitem>
        <para>
	  Si la table est petite, il peut être parfaitement raisonnable
	  d'ajouter une nouvelle colonne (notez que cela doit être fait sur
	  <emphasis>chaque n&oelig;ud</emphasis>&nbsp;!), lui assigner une
          une nouvelle séquence et la déclarer comme clé primaire.
	</para>

        <para>
	  S'il n'y a que quelques lignes, cela ne prend qu'une fraction de
	  seconde et avec de la chance, cela n'aura pas d'impact sur
	  l'application.
	</para>

        <para>
	  Même si la table est relativement large, alors qu'elle n'est pas
          accédée fréquemment par l'application, alors le verrouillage de la
	  table provoqué par <command>ALTER TABLE</command> n'entraînera pas
	  d'inconvénients.
        </para>
      </listitem>

      <listitem>
        <para>
	  Si la table est large, qu'elle est vitale et fortement utilisée par
          l'application, alors il peut être nécessaire de prévoir une coupure
          de service de l'application afin d'accomplir les modifications, ce
          qui vous laissera un peu vulnérable tant que la procédure ne sera pas
	  complétée.
        </para>

        <para>
	  Si une coupure de service est problématique, alors la mise à jour
	  vers &slony1; version 2 devra être planifiée avec soin...
	</para>
      </listitem>
    </itemizedlist>
  </listitem>

  <listitem>
    <para>
      Créez un nouvel ensemble de réplication (<xref linkend="stmtcreateset"/>
      et ajoutez à nouveau la table dans cet ensemble (<xref
      linkend="stmtsetaddtable"/>).
    </para>

    <para>
      S'il existe plusieurs tables, elles peuvent être gérées via un ensemble
      de réplication unique.
    </para>
  </listitem>

  <listitem>
    <para>
      Abonnez l'ensemble de réplication (<xref linkend="stmtsubscribeset"/>)
      pour tous les n&oelig;uds désirés.
    </para>
  </listitem>

  <listitem>
    <para>
      Une fois que l'abonnement est complété, fusionnez les ensembles de
      réplications si nécessaire (<xref linkend="stmtmergeset"/>).
    </para>
  </listitem>
</itemizedlist>

<para>
  Cette approche devrait fonctionner pour les tables qui sont relativement
  petites ou rarement utilisées. D'autre part, si la table est large et
  massivement utilisée, une autre approche pourrait être nécessaire,
  c'est-à-dire créer votre propre séquence, et <quote>promouvoir</quote>
  l'ancienne colonne générée par &slony1; dans une colonne <quote>réelle</quote>
  au sein du schéma de votre base de données. Les grandes lignes de cette
  procédure sont les suivantes&nbsp;:
</para>

<itemizedlist>
  <listitem>
    <para>
      Ajouter une séquence qui assigne des valeurs à la colonne.
    </para>

    <para>
      Les étapes d'installation incluent les commandes SQL <command>CREATE
      SEQUENCE</command>, <command>SELECT SETVAL()</command> (pour définir
      une valeur de séquence assez haute pour refléter les valeurs utilisées
      dans la table), le <xref linkend="stmtcreateset"/> de Slonik (pour créer
      un ensemble de réplication dans lequel on placera la séquence), le
      <xref linkend="stmtsetaddsequence"/> de Slonik (pour placer la séquence
      dans l'ensemble de réplication), le <xref linkend="stmtsubscribeset"/>
      de Slonik (pour définir les abonnements de ce nouvel ensemble de
      réplication).
    </para>
  </listitem>

  <listitem>
    <para>
      Attachez la séquence à la colonne dans la table.
    </para>

    <para>
      Ceci implique les commandes <command>ALTER TABLE ALTER COLUMN</command>,
      qui doivent être exécutées via la commande Slonik <xref
      linkend="stmtddlscript"/>.
    </para>
  </listitem>

  <listitem>
    <para>
      Renommez la colonne <envar>_Slony-I_@CLUSTERNAME@_rowID</envar> afin que
      &slony1; ne considère pas qu'elle est sous son contrôle.
    </para>

    <para>
      Ceci implique les commandes <command>ALTER TABLE ALTER COLUMN</command>,
      qui doivent être exécutées via la commande Slonik <xref
      linkend="stmtddlscript"/>.
    </para>

    <para>
      Notez que ces deux modifications peuvent être accomplies au sein d'une
      requête <xref linkend="stmtddlscript"/> unique.
    </para>
  </listitem>
</itemizedlist>

</sect2>

<sect2>
<title>Nouvelle gestion des triggers dans &slony1; Version 2</title>

<para>
  Un des changements majeurs de &slony1; est que l'activation et la
  désactivation des triggers et règles («&nbsp;rules&nbsp;») se fait
  maintenant entièrement en SQL, supporté par &postgres; 8.3+, plutôt
  que via des modifications directes dans le catalogue système.
</para>

<para>
  Cela implique que les utilisateurs de &slony1; doivent étudier la syntaxe
  &postgres; pour <command>ALTER TABLE</command> car c'est ainsi qu'ils
  accompliront ce qu'ils accomplissait précédemment via les commandes <xref
  linkend="stmtstoretrigger"/> et <xref linkend="stmtdroptrigger"/>.
</para>

</sect2>

<sect2 id="upgrade20">
<title>Mettre à jour en version 2</title>

<para>
  La version 2 est <emphasis>vraiment</emphasis> différente des versions
  précédentes, supprimant le support des versions de &postgres; antérieures à la
  8.3 car la version 8.3 a ajouté la notion de <quote>rôle de
  réplication</quote>, éliminant du coup d'avoir recours à des modifications du
  catalogue système ainsi que du type de données <envar>xxid</envar> pas
  complètement supporté.
</para>

<para>
  Grâce au remplacement du type <envar>xxid</envar> par un type XID natif en
  8.3, la commande &lslonik; <xref linkend="stmtupdatefunctions"/> n'est pas
  adéquate pour mettre à jour d'une ancienne version de &slony1; à la version
  2.
</para>

<para>
  En version 2.0.2, nous avons ajouté une nouvelle option à <xref
  linkend="stmtsubscribeset"/>, <command>OMIT COPY</command>, qui permet de
  prendre une approche alternative pour la mise à jour. Cette approche revient
  à&nbsp;:
</para>

<itemizedlist>
  <listitem>
    <para>
      Désinstaller l'ancienne version de &slony1;.
    </para>

    <para>
      Quand &slony1; se désinstalle, les corruptions des catalogues sont
      corrigées.
    </para>
  </listitem>

  <listitem>
    <para>
      Installer &slony1; version 2
    </para>
  </listitem>

  <listitem>
    <para>
      Réabonner les n&oelig;uds avec l'option <command>OMIT COPY</command>
    </para>
  </listitem>
</itemizedlist>

<warning>
  <para>
    Cela représente un gros risque. Durant le processus de mise à jour,
    &slony1; n'est pas installé et si une application met à jour l'une ou
    l'autre base de données, le ré-abonnement, omettant de copier les données,
    se finira avec des données <emphasis>non synchronisées</emphasis>.
  </para>

  <para>
    L'administrateur <emphasis>doit être très attentif</emphasis> car &slony1;
    ne dispose d'aucun moyen pour s'assurer de l'intégrité des données lors
    de ce processus.
  </para>
</warning>

<para>
  Le processus suivant est suggéré pour s'assurer d'avoir une mise à jour aussi
  sûre que possible, étant donné les risques évoqués ci-dessus.
</para>

<itemizedlist>
  <listitem>
    <para>
      Utiliser <xref linkend="slonikconfdump"/> pour générer un script &lslonik;
      de création du cluster de réplication.
    </para>

    <para>
      Assurez-vous de vérifier les instructions <xref linkend="admconninfo"/>,
      car les valeurs sont récupérées de la configuration du PATH, qui ne sont
      pas forcément convenables pour exécuter &lslonik;.
    </para>

    <para>
      Cette étape peut se faire avant la mise hors ligne de l'application.
    </para>
  </listitem>

  <listitem>
    <para>
      Détermine les triggers qui ont la configuration <xref
      linkend="stmtstoretrigger"/> sur les n&oelig;uds abonnés.
    </para>

    <para>
      Comme indiqué sur <xref linkend="triggers"/>, la gestion a changé
      fondamentalement entre &slony1; 1.2 et 2.0.
    </para>

    <para>
      En général, il faut lancer une requête sur la table
      <envar>sl_table</envar> de chaque n&oelig;ud et, pour chaque trigger
      trouvé dans <envar>sl_table</envar>, il est généralement approprié de
      configurer un script indiquant soit <command>ENABLE REPLICA
      TRIGGER</command> soit <command>ENABLE ALWAYS TRIGGER</command> pour
      ces triggers.
    </para>

    <para>
      Cette étape peut se faire avant la mise hors ligne de l'application.
    </para>
  </listitem>

  <listitem>
    <para>
      Mettre hors ligne l'application le temps de la mise à jour pour qu'aucune
      modification ne puisse venir de l'utilisation de l'application.
    </para>
  </listitem>

  <listitem>
    <para>
      Pour vous assurer que les applications ne feront pas de modifications,
      il pourrait être approprié d'empêcher les connexions en modifiant le
      fichier de configuration <filename>pg_hba.conf</filename>.
    </para>
  </listitem>

  <listitem>
    <para>
      Assurez-vous que la réplication est synchrone, en examinant la vue
      <envar>sl_status</envar> et toute donnée de l'application qui serait
      appropriée.
    </para>
  </listitem>

  <listitem>
    <para>
      Arrêter les processus &lslon;.
    </para>
  </listitem>

  <listitem>
    <para>
      Désinstaller l'ancienne version de &slony1; de la base de données.
    </para> 

    <para>
      Ceci implique d'exécuter un script &lslonik; qui exécute <xref
      linkend="stmtuninstallnode"/> sur chaque n&oelig;ud du cluster.
    </para>
  </listitem>

  <listitem>
    <para>
      Assurer vous que les nouveaux exécutables &slony1; sont en place.
    </para> 

    <para>
      Une méthode simple de le faire est d'avoir les anciens et les nouveaux
      exécutables dans des répertoires différents, de stopper
      <application>postmaster</application>, de pointer vers le bon répertoire,
      et de relancer <application>postmaster</application>.
    </para>
  </listitem>

  <listitem>
    <para>
      Lancer le script qui reconfigure la réplication générée précédemment.
    </para> 

    <para>
      Ce script devrait être divisé en deux parties à exécuter séparément&nbsp;:
    </para> 

    <itemizedlist>
      <listitem>
        <para>
          En premier, configurer les n&oelig;uds, les chemins, les ensembles,
          et ainsi de suite.
        </para>
      </listitem>
      
      <listitem>
        <para>
          Maintenant, lancer les processus &lslon;.
        </para>
      </listitem>
      
      <listitem>
        <para>
          Enfin, exécuter la portion qui lance <xref
          linkend="stmtsubscribeset"/>.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      Diviser le script <xref linkend="slonikconfdump"/> comme décrit ci-dessus
      est laissé en exercice au lecteur.
    </para>
  </listitem>

  <listitem>
    <para>
      Si des triggers doivent être activés sur les n&oelig;uds abonnés, c'est
      le bon moment pour le faire.
    </para>
  </listitem>

  <listitem>
    <para>
      Maintenant, le cluster est nouveau disponible et fonctionnel, prêt à être
      reconfiguré pour que les applications puissent de nouveau y accéder.
    </para>
  </listitem>

</itemizedlist>

</sect2>

</sect1>
