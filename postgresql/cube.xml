<?xml version="1.0" encoding="UTF-8"?>
<sect1 id="cube" xreflabel="cube">
 <title>cube</title>

 <indexterm zone="cube">
  <primary>cube (extension)</primary>
 </indexterm>

 <para>
  Ce module code le type de données <type>cube</type> pour
  représenter des cubes à plusieurs dimensions.
 </para>

 <sect2>
  <title>Syntaxe</title>

  <para>
   <xref linkend="cube-repr-table"/> affiche les représentations externes
   valides pour le type <type>cube</type>. <replaceable>x</replaceable>,
   <replaceable>y</replaceable>, etc. dénotent des nombres flottants.
  </para>

  <table id="cube-repr-table">
   <title>Représentations externes d'un cube</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>External Syntax</entry>
      <entry>Meaning</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal><replaceable>x</replaceable></literal></entry>
      <entry>point uni-dimensionnel (ou interval unidimensionnel de longueur
       nulle)
      </entry>
     </row>
     <row>
      <entry><literal>(<replaceable>x</replaceable>)</literal></entry>
      <entry>Identique à ci-dessus</entry>
     </row>
     <row>
      <entry><literal><replaceable>x1</replaceable>,<replaceable>x2</replaceable>,...,<replaceable>xn</replaceable></literal></entry>
      <entry>Un point dans un espace à n dimensions, représenté en interne
       comme un cube de volume nul
      </entry>
     </row>
     <row>
      <entry><literal>(<replaceable>x1</replaceable>,<replaceable>x2</replaceable>,...,<replaceable>xn</replaceable>)</literal></entry>
      <entry>Identique à ci-dessus</entry>
     </row>
     <row>
      <entry><literal>(<replaceable>x</replaceable>),(<replaceable>y</replaceable>)</literal></entry>
      <entry>Interval uni-dimensionnel débutant à
       <replaceable>x</replaceable> et finissant à
       <replaceable>y</replaceable> ou vice-versa&nbsp;; l'ordre n'importe pas
      </entry>
     </row>
     <row>
      <entry><literal>[(<replaceable>x</replaceable>),(<replaceable>y</replaceable>)]</literal></entry>
      <entry>Identique à ci-dessus</entry>
     </row>
     <row>
      <entry><literal>(<replaceable>x1</replaceable>,...,<replaceable>xn</replaceable>),(<replaceable>y1</replaceable>,...,<replaceable>yn</replaceable>)</literal></entry>
      <entry>Cube à n dimensions représenté par paires de coins diagonalement opposés
      </entry>
     </row>
     <row>
      <entry><literal>[(<replaceable>x1</replaceable>,...,<replaceable>xn</replaceable>),(<replaceable>y1</replaceable>,...,<replaceable>yn</replaceable>)]</literal></entry>
      <entry>Identique à ci-dessus</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   L'ordre de saisie des coins opposés d'un cube n'a aucune importance.
   Les fonctions <type>cube</type> s'occupent de la bascule
   nécessaire à l'obtention d'une représentation uniforme
   <quote>bas gauche, haut droit</quote>.
   When the corners coincide, <type>cube</type> stores only one corner
   along with an <quote>is point</quote> flag to avoid wasting space.
  </para>

  <para>
   Les espaces sont ignorées,
   <literal>[(<replaceable>x</replaceable>),(<replaceable>y</replaceable>)]</literal>
   est donc identique à
   <literal>[ ( <replaceable>x</replaceable> ), ( <replaceable>y</replaceable> ) ]</literal>.
  </para>
 </sect2>

 <sect2>
  <title>Précision</title>

  <para>
   Les valeurs sont enregistrées en interne sous la forme de nombres en
   virgule flottante. Cela signifie que les nombres avec plus de 16 chiffres
   significatifs sont tronqués.
  </para>
 </sect2>

 <sect2>
  <title>Utilisation</title>

  <para>
   <xref linkend="cube-operators-table"/> shows the operators provided for
   type <type>cube</type>.
  </para>

  <table id="cube-operators-table">
   <title>Cube Operators</title>
   <tgroup cols="3">
    <thead>
     <row>
      <entry>Opérateur</entry>
      <entry>Result</entry>
      <entry>Description</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal>a = b</literal></entry>
      <entry><type>boolean</type></entry>
      <entry>Les cubes a et b sont identiques.</entry>
     </row>

     <row>
      <entry><literal>a &amp;&amp; b</literal></entry>
      <entry><type>boolean</type></entry>
      <entry>Les cubes a et b se chevauchent.</entry>
     </row>

     <row>
      <entry><literal>a @&gt; b</literal></entry>
      <entry><type>boolean</type></entry>
      <entry>Le cube a contient le cube b.</entry>
     </row>

     <row>
      <entry><literal>a &lt;@ b</literal></entry>
      <entry><type>boolean</type></entry>
      <entry>Le cube a est contenu dans le cube b.</entry>
     </row>

     <row>
      <entry><literal>a &lt; b</literal></entry>
      <entry><type>boolean</type></entry>
      <entry>The cube a is less than the cube b.</entry>
     </row>

     <row>
      <entry><literal>a &lt;= b</literal></entry>
      <entry><type>boolean</type></entry>
      <entry>The cube a is less than or equal to the cube b.</entry>
     </row>

     <row>
      <entry><literal>a &gt; b</literal></entry>
      <entry><type>boolean</type></entry>
      <entry>The cube a is greater than the cube b.</entry>
     </row>

     <row>
      <entry><literal>a &gt;= b</literal></entry>
      <entry><type>boolean</type></entry>
      <entry>The cube a is greater than or equal to the cube b.</entry>
     </row>

     <row>
      <entry><literal>a &lt;&gt; b</literal></entry>
      <entry><type>boolean</type></entry>
      <entry>The cube a is not equal to the cube b.</entry>
     </row>

     <row>
      <entry><literal>a -&gt; n</literal></entry>
      <entry><type>float8</type></entry>
      <entry>Get <replaceable>n</replaceable>-th coordinate of cube (counting from 1).</entry>
     </row>

     <row>
      <entry><literal>a ~&gt; n</literal></entry>
      <entry><type>float8</type></entry>
      <entry>
        Get <replaceable>n</replaceable>-th coordinate in <quote>normalized</quote> cube
        representation, in which the coordinates have been rearranged into
        the form <quote>lower left &mdash; upper right</quote>; that is, the
        smaller endpoint along each dimension appears first.
      </entry>
     </row>

     <row>
      <entry><literal>a &lt;-&gt; b</literal></entry>
      <entry><type>float8</type></entry>
      <entry>Euclidean distance between a and b.</entry>
     </row>

     <row>
      <entry><literal>a &lt;#&gt; b</literal></entry>
      <entry><type>float8</type></entry>
      <entry>Taxicab (L-1 metric) distance between a and b.</entry>
     </row>

     <row>
      <entry><literal>a &lt;=&gt; b</literal></entry>
      <entry><type>float8</type></entry>
      <entry>Chebyshev (L-inf metric) distance between a and b.</entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <para>
   (Avant PostgreSQL 8.2, les opérateurs de contenance <literal>@&gt;</literal>
   et <literal>&lt;@</literal> étaient appelés respectivement
   <literal>@</literal> et <literal>~</literal>. Ces noms sont toujours
   disponibles mais sont déclarés obsolètes et seront supprimés un jour. Les
   anciens noms sont inversés par rapport à la convention suivie par les types
   de données géométriques&nbsp;!)
  </para>

  <para>
   The scalar ordering operators (<literal>&lt;</literal>, <literal>&gt;=</literal>, etc)
   do not make a lot of sense for any practical purpose but sorting.  These
   operators first compare the first coordinates, and if those are equal,
   compare the second coordinates, etc.  They exist mainly to support the
   b-tree index operator class for <type>cube</type>, which can be useful for
   example if you would like a UNIQUE constraint on a <type>cube</type> column.
  </para>

  <para>
   The <filename>cube</filename> module also provides a GiST index operator class for
   <type>cube</type> values.
   A <type>cube</type> GiST index can be used to search for values using the
   <literal>=</literal>, <literal>&amp;&amp;</literal>, <literal>@&gt;</literal>, and
   <literal>&lt;@</literal> operators in <literal>WHERE</literal> clauses.
  </para>

  <para>
   In addition, a <type>cube</type> GiST index can be used to find nearest
   neighbors using the metric operators
   <literal>&lt;-&gt;</literal>, <literal>&lt;#&gt;</literal>, and
   <literal>&lt;=&gt;</literal> in <literal>ORDER BY</literal> clauses.
   For example, the nearest neighbor of the 3-D point (0.5, 0.5, 0.5)
   could be found efficiently with:
<programlisting>
SELECT c FROM test ORDER BY c &lt;-&gt; cube(array[0.5,0.5,0.5]) LIMIT 1;
</programlisting>
  </para>

  <para>
   The <literal>~&gt;</literal> operator can also be used in this way to
   efficiently retrieve the first few values sorted by a selected coordinate.
   For example, to get the first few cubes ordered by the first coordinate
   (lower left corner) ascending one could use the following query:
<programlisting>
SELECT c FROM test ORDER BY c ~&gt; 1 LIMIT 5;
</programlisting>
   And to get 2-D cubes ordered by the first coordinate of the upper right
   corner descending:
<programlisting>
SELECT c FROM test ORDER BY c ~&gt; 3 DESC LIMIT 5;
</programlisting>
  </para>

  <para>
   <xref linkend="cube-functions-table"/> indique les fonctions disponibles.
  </para>

  <table id="cube-functions-table">
   <title>Fonctions cube</title>
   <tgroup cols="4">
    <thead>
     <row>
      <entry>Function</entry>
      <entry>Result</entry>
      <entry>Description</entry>
      <entry>Example</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal>cube(float8)</literal></entry>
      <entry><type>cube</type></entry>
      <entry>Crée un cube uni-dimensionnel de coordonnées identiques.
      </entry>
      <entry>
       <literal>cube(1) == '(1)'</literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube(float8, float8)</literal></entry>
      <entry><type>cube</type></entry>
      <entry>Crée un cube uni-dimensionnel.
      </entry>
      <entry>
       <literal>cube(1,2) == '(1),(2)'</literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube(float8[])</literal></entry>
      <entry><type>cube</type></entry>
      <entry>Crée un cube de volume nul en utilisant les coordonnées
       définies par le tableau.
      </entry>
      <entry>
       <literal>cube(ARRAY[1,2]) == '(1,2)'</literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube(float8[], float8[])</literal></entry>
      <entry><type>cube</type></entry>
      <entry>Crée un cube avec les coordonnées haut droit et
       bas gauche définies par deux tableaux de flottants, obligatoirement
       de même taille.
      </entry>
      <entry>
       <literal>cube(ARRAY[1,2], ARRAY[3,4]) == '(1,2),(3,4)'
       </literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube(cube, float8)</literal></entry>
      <entry><type>cube</type></entry>
      <entry>Makes a new cube by adding a dimension on to an existing cube,
       with the same values for both endpoints of the new coordinate.  This
       is useful for building cubes piece by piece from calculated values.
      </entry>
      <entry>
       <literal>cube('(1,2),(3,4)'::cube, 5) == '(1,2,5),(3,4,5)'</literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube(cube, float8, float8)</literal></entry>
      <entry><type>cube</type></entry>
      <entry>Makes a new cube by adding a dimension on to an existing
       cube. This is useful for building cubes piece by piece from calculated
       values.
      </entry>
      <entry>
       <literal>cube('(1,2),(3,4)'::cube, 5, 6) == '(1,2,5),(3,4,6)'</literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube_dim(cube)</literal></entry>
      <entry><type>integer</type></entry>
      <entry>Returns the number of dimensions of the cube.
      </entry>
      <entry>
       <literal>cube_dim('(1,2),(3,4)') == '2'</literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube_ll_coord(cube, integer)</literal></entry>
      <entry><type>float8</type></entry>
      <entry>Returns the <replaceable>n</replaceable>-th coordinate value for the lower
       left corner of the cube.
      </entry>
      <entry>
       <literal>cube_ll_coord('(1,2),(3,4)', 2) == '2'</literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube_ur_coord(cube, integer)</literal></entry>
      <entry><type>float8</type></entry>
      <entry>Returns the <replaceable>n</replaceable> -th coordinate value for the
       upper right corner of the cube.
      </entry>
      <entry>
       <literal>cube_ur_coord('(1,2),(3,4)', 2) == '4'</literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube_is_point(cube)</literal></entry>
      <entry><type>boolean</type></entry>
      <entry>Returns true if the cube is a point, that is,
        the two defining corners are the same.</entry>
      <entry>
      </entry>
     </row>

     <row>
      <entry><literal>cube_distance(cube, cube)</literal></entry>
      <entry><type>float8</type></entry>
     <entry>Renvoie la distance entre deux cubes. Si les deux cubes sont des
       points, il s'agit de la fonction de distance habituelle.
      </entry>
      <entry>
      </entry>
     </row>

     <row>
      <entry><literal>cube_subset(cube, integer[])</literal></entry>
      <entry><type>cube</type></entry>
      <entry>Makes a new cube from an existing cube, using a list of
       dimension indexes from an array. Can be used to extract the endpoints
       of a single dimension, or to drop dimensions, or to reorder them as
       desired.
      </entry>
      <entry>
       <literal>cube_subset(cube('(1,3,5),(6,7,8)'), ARRAY[2]) == '(3),(7)'</literal>
       <literal>cube_subset(cube('(1,3,5),(6,7,8)'), ARRAY[3,2,1,1]) ==
        '(5,3,1,1),(8,7,6,6)'</literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube_union(cube, cube)</literal></entry>
      <entry><type>cube</type></entry>
      <entry>Produces the union of two cubes.
      </entry>
      <entry>
      </entry>
     </row>

     <row>
      <entry><literal>cube_inter(cube, cube)</literal></entry>
      <entry><type>cube</type></entry>
      <entry>Produces the intersection of two cubes.
      </entry>
      <entry>
      </entry>
     </row>

     <row>
      <entry><literal>cube_enlarge(c cube, r double, n integer)</literal></entry>
      <entry><type>cube</type></entry>
      <entry>Increases the size of the cube by the specified
       radius <replaceable>r</replaceable> in at least <replaceable>n</replaceable> dimensions.
       If the radius is negative the cube is shrunk instead.
       All defined dimensions are changed by the radius <replaceable>r</replaceable>.
       Lower-left coordinates are decreased by <replaceable>r</replaceable> and
       upper-right coordinates are increased by <replaceable>r</replaceable>.  If a
       lower-left coordinate is increased to more than the corresponding
       upper-right coordinate (this can only happen when <replaceable>r</replaceable>
       &lt; 0) than both coordinates are set to their average.
       If <replaceable>n</replaceable> is greater than the number of defined dimensions
       and the cube is being enlarged (<replaceable>r</replaceable> &gt; 0), then extra
       dimensions are added to make <replaceable>n</replaceable> altogether;
       0 is used as the initial value for the extra coordinates.
       This function is useful for creating bounding boxes around a point for
       searching for nearby points.
      </entry>
      <entry>
       <literal>cube_enlarge('(1,2),(3,4)', 0.5, 3) ==
        '(0.5,1.5,-0.5),(3.5,4.5,0.5)'</literal>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect2>

 <sect2>
  <title>Par défaut</title>

  <para>
   Le développeur pense que l'union&nbsp;:
  </para>
  <programlisting>
select cube_union('(0,5,2),(2,3,1)', '0');
cube_union
-------------------
(0, 0, 0),(2, 5, 2)
(1 row)
  </programlisting>

  <para>
   n'est pas en contradiction avec le bon sens. Pas plus que l'intersection
  </para>

  <programlisting>
select cube_inter('(0,-1),(1,1)', '(-2),(2)');
cube_inter
-------------
(0, 0),(1, 0)
(1 row)
  </programlisting>

  <para>
   Dans toutes les opérations binaires sur des boîtes de tailles différentes,
   l'auteur suppose que la plus petite est une projection cartésienne,
   c'est-à-dire qu'il y a des zéros à la place des coordonnées omises dans la représentation
   sous forme de chaîne. Les exemples ci-dessus sont équivalents à&nbsp;:
  </para>

  <programlisting>
cube_union('(0,5,2),(2,3,1)','(0,0,0),(0,0,0)');
cube_inter('(0,-1),(1,1)','(-2,0),(2,0)');
  </programlisting>

  <para>
   Le prédicat de contenance suivant utilise la syntaxe en points alors qu'en
   fait, le second argument est représenté en interne par une boîte. Cette
   syntaxe rend inutile la définition du type point et des fonctions
   pour les prédicats (boîte,point).
  </para>

  <programlisting>
select cube_contains('(0,0),(1,1)', '0.5,0.5');
cube_contains
--------------
t
(1 row)
  </programlisting>
 </sect2>

 <sect2>
  <title>Notes</title>

  <para>
   Pour des exemples d'utilisation, voir les tests de régression
   <filename>sql/cube.sql</filename>.
  </para>

  <para>
   Pour éviter toute mauvaise utilisation, le nombre de dimensions des cubes
   est limité à 100. Cela se configure dans <filename>cubedata.h</filename>.
  </para>
 </sect2>

 <sect2>
  <title>Crédits</title>

  <para>
   Auteur d'origine&nbsp;: Gene Selkov, Jr. <email>selkovjr@mcs.anl.gov</email>,
   Mathematics and Computer Science Division, Argonne National Laboratory.
  </para>
 </sect2>

 <sect2>
  <title>Note de l'auteur</title>
  <para>
   Mes remerciements vont tout particulièrement au professeur Joe Hellerstein
   (<ulink url="http://db.cs.berkeley.edu/jmh/"></ulink>) qui a su extraire
   l'idée centrale de GiST (<ulink
   url="http://gist.cs.berkeley.edu/"></ulink>), et à son étudiant précédant,
   Andy Dong pour son
   exemple rédigé dans Illustra. Mes remerciements vont également aux
   développeurs de PostgreSQL qui m'ont permis de créer mon propre monde
   et de pouvoir y vivre sans être dérangé. Toute ma gratitude aussi à
   Argonne Lab et au département américain de l'énergie pour les années de
   support dans mes recherches sur les bases de données.
  </para>

  <para>
   Des modifications mineures ont été effectuées sur ce module par Bruno Wolff
   III <email>bruno@wolff.to</email> en août/septembre 2002. Elles incluent
   la modification de la précision (de simple à double) et l'ajout de
   quelques nouvelles fonctions.
  </para>

  <para>
   Des mises à jour supplémentaires ont été réalisées par Joshua Reich
   <email>josh@root.net</email> en juillet 2006. Elles concernent
   l'ajout de <literal>cube(float8[], float8[])</literal> et le nettoyage du code pour
   utiliser le protocole d'appel V1 à la place de la forme V0 maintenant
   obsolète.
  </para>
 </sect2>

</sect1>
