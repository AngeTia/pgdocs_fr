<?xml version="1.0" encoding="UTF-8"?>
<!-- doc/src/sgml/pgvisibility.sgml -->

<sect1 id="pgvisibility" xreflabel="pg_visibility">
 <title>pg_visibility</title>

 <indexterm zone="pgvisibility">
  <primary>pg_visibility</primary>
 </indexterm>

 <para>
  Le module <filename>pg_visibility</filename> fourni la possibilité
  d'examiner la visibility map (VM) et les informations de visibilité
  au niveau page. It also
  provides functions to check the integrity of the visibility map and to
  force it to be rebuilt.
 </para>

 <para>
  Three different bits are used to store information about page-level
  visibility.
  L'octet totalement visible (all-visible) de la visbility map indique
  que chaque ligne d'une page donnée d'une relation est visible pour
  toute transaction courante.
  L'octet totalement figé (all-frozen) de la visibility map indique
  que chaque ligne de la page est figée; c'est à dire qu'aucun vacuum
  n'aura besoin de modifier la page tant qu'une ligne n'est pas insérée,
  mise à jour, supprimée ou verrouillée dans cette page.
  L'octet de niveau de page <literal>PD_ALL_VISIBLE</literal> a la même
  signification que l'octet totalement visible de la visibility map, mais
  il est stocké au sein de la page plutôt que dans une structure de donnée
  séparée. Ces deux octets seront normalement identiques, mais l'octet de
  niveau de page peut parfois rester défini pendant que la visibility map
  est purgée lors de la récupération suite à un crash ; ou ils peuvent
  être différents suite à un changement survenant après que
  <literal>pg_visibility</literal> ait examiné la visibility map et avant
  qu'il ait examiné la page de donnée. Any event which
  causes data corruption can also cause these bits to disagree.
 </para>

 <para>
  Les fonctions qui affichent les informations concernant
  <literal>PD_ALL_VISIBLE</literal> sont plus beaucoup plus coûteuses que
  celles qui consultent uniquement la visibility map, en effet, elles
  doivent lire les blocs de données des relations plutôt que de ne
  s'intéresser qu'a la visibility map (qui est bien plus petite). Functions that check the relation's
  data blocks are similarly expensive.
 </para>

 <sect2>
  <title>Fonctions</title>

  <variablelist>
   <varlistentry>
    <term><function>pg_visibility_map(regclass, blkno bigint, all_visible
    OUT boolean, all_frozen OUT boolean) renvoie un enregistrement
    </function></term>
    <listitem>
     <para>
      Renvoie tout les octets complétement visibles et complétement figés
      de la visibility map pour un bloc donné pour une relation donnée.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><function>pg_visibility(regclass, blkno bigint, all_visible OUT
    boolean, all_frozen OUT boolean, pd_all_visible OUT boolean) renvoie
    un enregistrement</function></term>
    <listitem>
     <para>
      Renvoie tout les octets complétement visibles et complétement figés
      de la visibility map pour un bloc donné pour une relation donnée
      ainsi que l'octet <literal>PD_ALL_VISIBLE</literal> pour le bloc.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><function>pg_visibility_map(regclass, blkno OUT bigint,
    all_visible OUT boolean, all_frozen OUT boolean) renvoie
    un enregistrement</function></term>
    <listitem>
     <para>
      Renvoie tout les octets complétement visibles et complétement figés
      de la visibility map pour un bloc donné pour une relation donnée.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><function>pg_visibility(regclass, blkno OUT bigint, all_visible
    OUT boolean, all_frozen OUT boolean, pd_all_visible OUT boolean) renvoie
    un enregistrement</function></term>

    <listitem>
     <para>
      Renvoie tout les octets complétement visibles et complétement figés
      de la visibility map pour un bloc donné pour une relation donnée
      ainsi que l'octet <literal>PD_ALL_VISIBLE</literal> pour le bloc.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><function>pg_visibility_map_summary(regclass, all_visible OUT
    bigint, all_frozen OUT bigint) renvoie
    un enregistrement</function></term>

    <listitem>
     <para>
      Renvoie le nombre de pages complétement visible ainsi que le nombre
      de pages complétement figées de la relation, en concordance avec la
      visibility map.
     </para>
    </listitem>
   </varlistentry>
  
   <varlistentry>
    <term><function>pg_check_frozen(regclass, t_ctid OUT tid) returns setof tid</function></term>

    <listitem>
     <para>
      Returns the TIDs of non-frozen tuples present in pages marked all-frozen
      in the visibility map.  If this function returns a non-empty set of
      TIDs, the database is corrupt.
     </para>
    </listitem>
   </varlistentry>
     
    <varlistentry>
    <term><function>pg_check_visible(regclass, t_ctid OUT tid) returns setof tid</function></term>

    <listitem>
     <para>
      Returns the TIDs of tuples which are not all-visible despite the fact
      that the pages which contain them are marked as all-visible in the
      visibility map.  If this function returns a non-empty set of TIDs, the
      database is corrupt.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><function>pg_truncate_visibility_map(regclass) returns void</function></term>

    <listitem>
     <para>
      Truncates the visibility map for the given relation.  This function
      is only expected to be useful if you suspect that the visibility map
      for the indicated relation is corrupt and wish to rebuild it.  The first
      <command>VACUUM</command> executed on the given relation after this function
      is executed will scan every page in the relation and rebuild the
      visibility map.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
	Par défaut, ces fonctions ne sont pas exécutables par public.
  </para>
 </sect2>

 <sect2>
  <title>Auteur</title>

  <para>
   Robert Haas <email>rhaas@postgresql.org</email>
  </para>
 </sect2>

</sect1>
