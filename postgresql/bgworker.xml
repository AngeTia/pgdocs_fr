<!-- doc/src/sgml/bgworker.sgml -->

<chapter id="bgworker">
 <title>Processus en tâche de fond (background worker)</title>

 <indexterm zone="bgworker">
  <primary>Background workers</primary>
 </indexterm>

 <para>
  PostgreSQL peut être étendu pour lancer du code utilisateur dans des processus
  séparés. Ces processus sont démarrés, arrêtés et supervisés par
  <command>postgres</command>, ce qui leur permet d'avoir un cycle de vie étroitement
  lié au statut du serveur. Ces processus ont des options pour s'attacher à la
  zone de mémoire partagée de <productname>PostgreSQL</productname> et pour se
  connecter aux bases de manière interne&nbsp;; ils peuvent également exécuter de
  multiples transactions séquentiellement, comme n'importe quel processus client
  standard connecté au serveur. De plus, en se liant avec la bibliothèque
  <application>libpq</application>, ils peuvent se connecter au serveur et se comporter
  comme une application cliente standard.
 </para>

 <warning>
  <para>
   Il y a de considérables risques de robustesse et sécurité lorsque l'on utilise
   des processus background worker. En effet, ceux-ci étant écrit en langage
   <literal>C</literal>, ils ont un accès total aux données. Les administrateurs
   désirant activer des modules incluant des processus background worker devraient
   prendre énormément de précautions. Seuls les modules soigneusement testés
   devraient être autorisés à lancer des processus background worker.
  </para>
 </warning>

 <para>
  Background workers can be initialized at the time that
  <productname>PostgreSQL</productname> is started by including the module name in
  <varname>shared_preload_libraries</varname>.  A module wishing to run a background
  worker can register it by calling
  <function>RegisterBackgroundWorker(<type>BackgroundWorker *worker</type>)</function>
  from its <function>_PG_init()</function>.  Background workers can also be started
  after the system is up and running by calling the function
  <function>RegisterDynamicBackgroundWorker(<type>BackgroundWorker
  *worker, BackgroundWorkerHandle **handle</type>)</function>.  Unlike
  <function>RegisterBackgroundWorker</function>, which can only be called from within
  the postmaster, <function>RegisterDynamicBackgroundWorker</function> must be
  called from a regular backend.
 </para>

 <para>
  La structure <structname>BackgroundWorker</structname> est définie ainsi&nbsp;:
<programlisting>
typedef void (*bgworker_main_type)(Datum main_arg);
typedef struct BackgroundWorker
{
    char        bgw_name[BGW_MAXLEN];
    int         bgw_flags;
    BgWorkerStartTime bgw_start_time;
    int         bgw_restart_time;       /* in seconds, or BGW_NEVER_RESTART */
    bgworker_main_type bgw_main;
    char        bgw_library_name[BGW_MAXLEN];   /* only if bgw_main is NULL */
    char        bgw_function_name[BGW_MAXLEN];  /* only if bgw_main is NULL */
    Datum       bgw_main_arg;
    int         bgw_notify_pid;
} BackgroundWorker;
</programlisting>
  </para>

  <para>
   <structfield>bgw_name</structfield> est une chaîne de caractères à utiliser
   dans les messages de trace, liste de processus et autres listes similaires.
  </para>

  <para>
   <structfield>bgw_flags</structfield> est un masque de bit OR indiquant les
   capacités que veut le module. Les valeurs possibles sont
   <literal>BGWORKER_SHMEM_ACCESS</literal> (demandant un accès à la mémoire partagée)
   et <literal>BGWORKER_BACKEND_DATABASE_CONNECTION</literal> (demandant la capacité
   d'établir une connexion à la base, grâce à laquelle il pourra exécuter des
   transactions et requêtes ultérieurement). Un processus en tâche de fond
   utilisant <literal>BGWORKER_BACKEND_DATABASE_CONNECTION</literal> pour se
   connecter à une base de données doit aussi attacher de la mémoire partagée
   en utilisant <literal>BGWORKER_SHMEM_ACCESS</literal>. Dans le cas contraire,
   le démarrage de la tâche de fond échouera.
  </para>

  <para>
   <structfield>bgw_start_time</structfield> spécifie l'état du serveur dans lequel
   <command>postgres</command> devrait démarrer le processus&nbsp;; les valeurs possibles
   sont <literal>BgWorkerStart_PostmasterStart</literal> (démarrer dès que
   <command>postgres</command> lui-même a fini sa propre initialisation&nbsp;;
   les processus réclamant celà ne sont pas éligibles à une connexion à la base de données),
   <literal>BgWorkerStart_ConsistentState</literal> (démarrer dès qu'un état cohérent
   a été atteint sur un serveur esclave en lecture seule, permettant aux processus de se
   connecter aux bases et d'exécuter des requêtes en lecture seule), et
   <literal>BgWorkerStart_RecoveryFinished</literal> (démarrer dès que le système
   est entré dans un état de lecture-écriture normal). Notez que les deux dernières
   valeurs sont équivalentes sur un serveur qui n'est pas un esclave en lecture seule.
   Notez également que ces valeurs indiquent uniquement quand les processus doivent
   être démarrés&nbsp;; ils ne s'arrêtent pas quand un état différent est atteint.
  </para>

  <para>
   <structfield>bgw_restart_time</structfield> est un intervalle, en secondes,
   que <command>postgres</command> doit attendre avant de redémarrer un
   processus, si celui-ci a subi un arrêt brutal. Cet intervalle peut être une valeur
   positive ou <literal>BGW_NEVER_RESTART</literal>, indiquant de ne pas redémarrer
   le processus suite à un arrêt brutal.
  </para>

  <para>
   <structfield>bgw_main</structfield> est un pointeur vers la fonction à lancer
   quand le processus est démarré. Cette fonction doit prendre un unique argument
   de type <type>Datum</type> et retourner <type>void</type>.
   <structfield>bgw_main_arg</structfield> lui sera passé comme unique argument.
   Notez que la variable globale <literal>MyBgworkerEntry</literal> pointe vers
   une copie de la structure <structname>BackgroundWorker</structname> passée
   lors de l'enregistrement. <structfield>bgw_main</structfield> may be
   NULL; in that case, <structfield>bgw_library_name</structfield> and
   <structfield>bgw_function_name</structfield> will be used to determine
   the entry point.  This is useful for background workers launched after
   postmaster startup, where the postmaster does not have the requisite
   library loaded.
  </para>

  <para>
   <structfield>bgw_library_name</structfield> is the name of a library in
   which the initial entry point for the background worker should be sought.
   It is ignored unless <structfield>bgw_main</structfield> is NULL.
   But if <structfield>bgw_main</structfield> is NULL, then the named library
   will be dynamically loaded by the worker process and
   <structfield>bgw_function_name</structfield> will be used to identify
   the function to be called.
  </para>

  <para>
   <structfield>bgw_function_name</structfield> is the name of a function in
   a dynamically loaded library which should be used as the initial entry point
   for a new background worker.  It is ignored unless
   <structfield>bgw_main</structfield> is NULL.
  </para>

  <para>
   <structfield>bgw_notify_pid</structfield> is the PID of a PostgreSQL
   backend process to which the postmaster should send <literal>SIGUSR1</literal>
   when the process is started or exits.  It should be 0 for workers registered
   at postmaster startup time, or when the backend registering the worker does
   not wish to wait for the worker to start up.  Otherwise, it should be
   initialized to <literal>MyProcPid</literal>.
  </para>

  <para>Une fois démarré, le processus peut se connecter à une base en appelant
   <function>BackgroundWorkerInitializeConnection(<parameter>char *dbname</parameter>, <parameter>char *username</parameter>)</function>.
   Cela autorise le processus à exécuter des transactions et des requêtes en
   utilisant l'interface <literal>SPI</literal>. Si <varname>dbname</varname> vaut
   NULL, la session n'est pas connectée à une base en particulier, mais les
   catalogues partagés peuvent être accédés. Si <varname>username</varname> vaut
   NULL, le processus sera démarré avec le super utilisateur créé durant
   <command>initdb</command>.
   BackgroundWorkerInitializeConnection ne peut être appelé qu'une fois par
   processus background, il n'est donc pas possible de changer de base de données.
  </para>

  <para>
   Les signaux sont initialement bloqués jusqu'à ce que le contrôle atteigne
   la fonction <structfield>bgw_main</structfield>, et doivent être débloqués
   par elle&nbsp;; cela permet une personnalisation des
   gestionnaires de signaux du processus, si nécessaire. Les signaux peuvent
   être débloqués dans le nouveau processus en appellant
   <function>BackgroundWorkerUnblockSignals</function> et bloqués en appelant
   <function>BackgroundWorkerBlockSignals</function>.
  </para>

  <para>
   If <structfield>bgw_restart_time</structfield> for a background worker is
   configured as <literal>BGW_NEVER_RESTART</literal>, or if it exits with an exit
   code of 0 or is terminated by <function>TerminateBackgroundWorker</function>,
   it will be automatically unregistered by the postmaster on exit.
   Otherwise, it will be restarted after the time period configured via
   <structfield>bgw_restart_time</structfield>, or immediately if the postmaster
   reinitializes the cluster due to a backend failure.  Backends which need
   to suspend execution only temporarily should use an interruptible sleep
   rather than exiting; Vérifiez
   que le drapeau <literal>WL_POSTMASTER_DEATH</literal> est positionné lors de
   l'appel à cette fonction, et vérifiez le code retour pour une sortie rapide
   dans le cas d'urgence où <command>postgres</command> lui-même se termine.
  </para>

  <para>
   When a background worker is registered using the
   <function>RegisterDynamicBackgroundWorker</function> function, it is
   possible for the backend performing the registration to obtain information
   regarding the status of the worker.  Backends wishing to do this should
   pass the address of a <type>BackgroundWorkerHandle *</type> as the second
   argument to <function>RegisterDynamicBackgroundWorker</function>.  If the
   worker is successfully registered, this pointer will be initialized with an
   opaque handle that can subsequently be passed to
   <function>GetBackgroundWorkerPid(<parameter>BackgroundWorkerHandle *</parameter>, <parameter>pid_t *</parameter>)</function> or
   <function>TerminateBackgroundWorker(<parameter>BackgroundWorkerHandle *</parameter>)</function>.
   <function>GetBackgroundWorker</function> can be used to poll the status of the
   worker: a return value of <literal>BGWH_NOT_YET_STARTED</literal> indicates that
   the worker has not yet been started by the postmaster;
   <literal>BGWH_STOPPED</literal> indicates that it has been started but is
   no longer running; and <literal>BGWH_STARTED</literal> indicates that it is
   currently running.  In this last case, the PID will also be returned via the
   second argument.
   <function>TerminateBackgroundWorker</function> causes the postmaster to send
   <literal>SIGTERM</literal> to the worker if it is running, and to unregister it
   as soon as it is not.
  </para>

  <para>
   In some cases, a process which registers a background worker may wish to
   wait for the worker to start up.  This can be accomplished by initializing
   <structfield>bgw_notify_pid</structfield> to <literal>MyProcPid</literal> and
   then passing the <type>BackgroundWorkerHandle *</type> obtained at
   registration time to
   <function>WaitForBackgroundWorkerStartup(<parameter>BackgroundWorkerHandle
   *handle</parameter>, <parameter>pid_t *</parameter>)</function> function.
   This function will block until the postmaster has attempted to start the
   background worker, or until the postmaster dies.  If the background runner
   is running, the return value will <literal>BGWH_STARTED</literal>, and
   the PID will be written to the provided address.  Otherwise, the return
   value will be <literal>BGWH_STOPPED</literal> or
   <literal>BGWH_POSTMASTER_DIED</literal>.
  </para>

  <para>
   Le module contrib <filename>worker_spi</filename> contient un exemple
   fonctionnel, qui démontre quelques techniques utiles.
  </para>

  <para>
   The maximum number of registered background workers is limited by
   <xref linkend="guc-max-worker-processes"/>.
  </para>
</chapter>
