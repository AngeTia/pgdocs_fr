<?xml version="1.0" encoding="UTF-8"?>
<!-- doc/src/sgml/bloom.sgml -->

<sect1 id="bloom" xreflabel="bloom">
 <title>bloom</title>

 <indexterm zone="bloom">
  <primary>bloom</primary>
 </indexterm>

 <para>
  <literal>bloom</literal> est un module qui implémente une méthode 
  d'accès par index. Il se présente comme un exemple de méthode d'accès 
  personnalisée et une utilisation générique des enregistrements dans les 
  WAL. Mais il est aussi utile en tant que tel. 
</para>

 <sect2>
  <title>Introduction</title>

  <para>
   La mise en oeuvre du
   <ulink url="https://fr.wikipedia.org/wiki/Filtre_de_Bloom"> filtre
   de bloom</ulink> autorise l'exclusion rapide des lignes non 
   pertinentes grâce aux signatures.
   Puisque une signature est une représentation à perte de tous les 
   attributs indexés, les résultats de la recherche doivent être 
   revérifiés en utilisant les informations des données non triées.
   L'utilisateur peut spécifier la taille de la signature (avec uint16,
   la valeur par défaut est 5) et le nombre d'octets peut être défini par
   attribut (1 &lt; colN &lt; 2048).
  </para>

  <para>
   Cet index est utile si une table possède de nombreux attributs et 
   qu'ils sont utilisés combinés dans des requêtes de façon arbitraire.
   Le traditionnel index <literal>btree</literal> est plus rapide 
   qu'un index bloom, mais il est nécessaire de créer de nombreux
   index pour qu'ils soient utilisés par les différentes formes d'une 
   requête tandis qu'il ne faut qu'un seul index bloom.
   Un index bloom ne supporte que les comparaisons d'équivalence.
   Puisque c'est un fichier de signature, et non pas un arbre, il devra 
   toujours être lu intégralement, de façon séquentielle, ce qui permet
   des performances constantes et non dépendantes de la requête.
  </para>
 </sect2>

 <sect2>
  <title>Paramètres</title>

  <para>
   L'index <literal>bloom</literal> accepte les paramètres suivants dans
   la clause <literal>WITH</literal>.
  </para>

   <variablelist>
   <varlistentry>
    <term><literal>length</literal></term>
    <listitem>
     <para>
      Longueur de la signature par une valeur de type uint16.
     </para>
    </listitem>
   </varlistentry>
   </variablelist>
   <variablelist>
   <varlistentry>
    <term><literal>col1 &mdash; col16</literal></term>
    <listitem>
     <para>
      Nombre d'octets pour la colonne correspondante.
     </para>
    </listitem>
   </varlistentry>
   </variablelist>
 </sect2>

 <sect2>
  <title>Exemples</title>

  <para>
    Exemple de définition et d'utilisation de cet index  
  </para>

<programlisting>
CREATE INDEX bloomidx ON tbloom(i1,i2,i3) 
       WITH (length=5, col1=2, col2=2, col3=4);
</programlisting>

  <para>
   Ici, nous avons créé un index bloom, avec une signature d'une longueur
   de 80 octets. Les attributs i1 et i2 correspondent à 2 octets, et 
   l'attribut i3 correspond à 4 octets. 
  </para>

  <para>
	  Exemple complet de définition d'un index bloom et utilisation de 
	  ce dernier.
  </para>

<programlisting>
CREATE TABLE tbloom AS
SELECT
    random()::int as i1,
    random()::int as i2,
    random()::int as i3,
    random()::int as i4,
    random()::int as i5,
    random()::int as i6,
    random()::int as i7,
    random()::int as i8,
    random()::int as i9,
    random()::int as i10,
    random()::int as i11,
    random()::int as i12,
    random()::int as i13
FROM
    generate_series(1,1000);
CREATE INDEX bloomidx ON tbloom USING
             bloom (i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12);
SELECT pg_relation_size('bloomidx');
CREATE index btree_idx ON tbloom(i1,i2,i3,i4,i5,i6,i7,i8,i9,i10,i11,i12);
SELECT pg_relation_size('btree_idx');
</programlisting>

<programlisting>
=# EXPLAIN ANALYZE SELECT * FROM tbloom WHERE i2 = 20 AND i10 = 15;
                                                   QUERY PLAN
-----------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on tbloom  (cost=1.50..5.52 rows=1 width=52) (actual time=0.057..0.057 rows=0 loops=1)
   Recheck Cond: ((i2 = 20) AND (i10 = 15))
   ->  Bitmap Index Scan on bloomidx  (cost=0.00..1.50 rows=1 width=0) (actual time=0.041..0.041 rows=9 loops=1)
         Index Cond: ((i2 = 20) AND (i10 = 15))
 Total runtime: 0.081 ms
(5 rows)
</programlisting>

  <para>
   Le seqscan est lent.
  </para>

<programlisting>
=# SET enable_bitmapscan = off;
=# SET enable_indexscan = off;
=# EXPLAIN ANALYZE SELECT * FROM tbloom WHERE i2 = 20 AND i10 = 15;
                                            QUERY PLAN
--------------------------------------------------------------------------------------------------
 Seq Scan on tbloom  (cost=0.00..25.00 rows=1 width=52) (actual time=0.162..0.162 rows=0 loops=1)
   Filter: ((i2 = 20) AND (i10 = 15))
 Total runtime: 0.181 ms
(3 rows)
</programlisting>

 <para>
  L'index btree ne sera pas utilisé avec cette requête.
 </para>

<programlisting>
=# DROP INDEX bloomidx;
=# CREATE INDEX btree_idx ON tbloom(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12);
=# EXPLAIN ANALYZE SELECT * FROM tbloom WHERE i2 = 20 AND i10 = 15;
                                            QUERY PLAN
--------------------------------------------------------------------------------------------------
 Seq Scan on tbloom (cost=0.00..25.00 rows=1 width=52) (actual time=0.210..0.210 rows=0 loops=1)
   Filter: ((i2 = 20) AND (i10 = 15))
 Total runtime: 0.250 ms
(3 rows)
</programlisting>
 </sect2>

 <sect2>
  <title>Interface OpClass</title>

  <para>
   L'interface opclass pour Bloom est simple. Elle nécessite une fonction
   de support : la fonction hash pour indexer les types de données.
   Elle nécessite un opérateur de recherche : l'opérateur d'équivalence.
   L'exemple suivant présente la définition <literal>opclass</literal>
   pour un type de données <literal>text</literal>.
  </para>

<programlisting>
CREATE OPERATOR CLASS text_ops
DEFAULT FOR TYPE text USING bloom AS
    OPERATOR    1   =(text, text),
    FUNCTION    1   hashtext(text);
</programlisting>
 </sect2>

 <sect2>
  <title>Limitations</title>
  <para>

   <itemizedlist>
    <listitem>
     <para>
      Pour l'instant, il n'existe dans ce module, que des opclasses pour 
      <literal>int4</literal>, <literal>text</literal>.
      Cependant, les utilisateurs peuvent en définir d'autres.
     </para>
    </listitem>

    <listitem>
     <para>
      Pour l'instant, seul l'opérateur <literal>=</literal> est supporté
      pour faire une recherche. Mais il sera possible dans le futur
      d'ajouter le support des tableaux avec les opérations contenu et
      intersection. 
     </para>
    </listitem>
   </itemizedlist>
  </para>
 </sect2>

 <sect2>
  <title>Auteurs</title>

  <para>
   Teodor Sigaev <email>teodor@postgrespro.ru</email>,
   Postgres Professional, Moscow, Russia
  </para>

  <para>
   Alexander Korotkov <email>a.korotkov@postgrespro.ru</email>,
   Postgres Professional, Moscow, Russia
  </para>

  <para>
   Oleg Bartunov <email>obartunov@postgrespro.ru</email>,
   Postgres Professional, Moscow, Russia
  </para>
 </sect2>

</sect1>
