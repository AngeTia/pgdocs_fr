<?xml version="1.0" encoding="UTF-8"?>
<sect1 id="B-tree-gist">
 <title>btree_gist</title>
 
 <indexterm zone="B-tree-gist">
  <primary>btree_gist</primary>
 </indexterm>

 <para>
  <filename>btree_gist</filename> fournit des classes d'opérateur
  GiST qui codent un comportement équivalent à celui du B-tree pour les
  types de données
  <type>int2</type>, <type>int4</type>, <type>int8</type>, <type>float4</type>,
  <type>float8</type>, <type>numeric</type>, <type>timestamp with time
  zone</type>,
  <type>timestamp without time zone</type>, <type>time with time zone</type>,
  <type>time without time zone</type>, <type>date</type>, <type>interval</type>,
  <type>oid</type>, <type>money</type>, <type>char</type>,
  <type>varchar</type>, <type>text</type>, <type>bytea</type>, <type>bit</type>,
  <type>varbit</type>, <type>macaddr</type>, <type>inet</type> et
  <type>cidr</type>.
 </para>

 <para>
  En règle général, ces classes d'opérateur ne dépassent pas en
  performance les méthodes d'indexage standard équivalentes du B-tree. Il
  leur manque une fonctionnalité majeure&nbsp;: la possibilité d'assurer
  l'unicité. Néanmoins
  they provide some other features that are not available with a B-tree
  index, as described below.  Also, these operator classes are useful
  when a multi-column GiST index is needed, wherein some of the columns
  are of data types that are only indexable with GiST but other columns
  are just simple data types.  Lastly, these operator classes are useful for
  GiST testing and as a base for developing other GiST operator classes.
 </para>

 <para>
  In addition to the typical B-tree search operators, <filename>btree_gist</filename>
  also provides index support for <literal>&lt;&gt;</literal> (<quote>not
  equals</quote>). This may be useful in combination with an
  <link linkend="SQL-CREATETABLE-EXCLUDE">exclusion constraint</link>,
  as described below.
 </para>

 <para>
  Also, for data types for which there is a natural distance metric,
  <filename>btree_gist</filename> defines a distance operator <literal>&lt;-&gt;</literal>,
  and provides GiST index support for nearest-neighbor searches using
  this operator.  Distance operators are provided for
  <type>int2</type>, <type>int4</type>, <type>int8</type>, <type>float4</type>,
  <type>float8</type>, <type>timestamp with time zone</type>,
  <type>timestamp without time zone</type>,
  <type>time without time zone</type>, <type>date</type>, <type>interval</type>,
  <type>oid</type>, and <type>money</type>.
 </para>

 <sect2>
  <title>Exemple d'utilisation</title>
  
  <para>
   Simple example using btree_gist instead of btree:
  </para>

  <programlisting><![CDATA[
CREATE TABLE test (a int4);
-- création de l'index
CREATE INDEX testidx ON test USING gist (a);
-- requête
SELECT * FROM test WHERE a < 10;
-- nearest-neighbor search: find the ten entries closest to "42"
SELECT *, a &lt;-&gt; 42 AS dist FROM test ORDER BY a &lt;-&gt; 42 LIMIT 10;
]]></programlisting>

  <para>
   Use an <link linkend="SQL-CREATETABLE-EXCLUDE">exclusion
   constraint</link> to enforce the rule that a cage at a zoo
   can contain only one kind of animal:
  </para>

<programlisting><![CDATA[
=&gt; CREATE TABLE zoo (
  cage   INTEGER,
  animal TEXT,
  EXCLUDE USING gist (cage WITH =, animal WITH &lt;&gt;)
);

=&gt; INSERT INTO zoo VALUES(123, 'zebra');
INSERT 0 1
=&gt; INSERT INTO zoo VALUES(123, 'zebra');
INSERT 0 1
=&gt; INSERT INTO zoo VALUES(123, 'lion');
ERROR:  conflicting key value violates exclusion constraint "zoo_cage_animal_excl"
DETAIL:  Key (cage, animal)=(123, lion) conflicts with existing key (cage, animal)=(123, zebra).
=&gt; INSERT INTO zoo VALUES(124, 'lion');
INSERT 0 1
]]></programlisting>
 </sect2>
 
 <sect2>
  <title>Auteurs</title>
  <para>
   Teodor Sigaev (<email>teodor@stack.net</email>), Oleg Bartunov
   (<email>oleg@sai.msu.su</email>) et Janko Richter
   (<email>jankorichter@yahoo.de</email>). Voir le
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist">site sur 
   GiST</ulink> pour plus d'information.
  </para>
 </sect2>

</sect1>

