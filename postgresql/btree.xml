<?xml version="1.0" encoding="UTF-8"?>
<!-- doc/src/sgml/btree.sgml -->

<chapter id="btree">
<title>Index B-Tree</title>

   <indexterm>
    <primary>index</primary>
    <secondary>B-Tree</secondary>
   </indexterm>

<sect1 id="btree-intro">
 <title>Introduction</title>

 <para>
  <productname>PostgreSQL</productname> inclut une implémentation de la
  structure standard d'index <acronym>btree</acronym> (<foreignphrase>multi-way balanced tree</foreignphrase>)
  N'importe quel type de données pouvant être trié dans un ordre linéaire
  clairement défini peut être indexé par un index btree.  La seule limitation
  est qu'une entrée d'index ne peut dépasser approximativement un tiers de page
  (après la compression TOAST si cela est possible).
 </para>

 <para>
  Puisque chaque classe d'opérateur btree impose un ordre de tri sur son type de
  données, les classes d'opérateur btree (ou, en réalité, les familles
  d'opérateur) ont finies par être utilisées par
  <productname>PostgreSQL</productname> comme représentation et connaissance
  générale des sémantiques de tri.  En conséqunce, elles ont acquis certaines
  fonctionnalités qui vont au délà de ce qui serait nécessaire pour simplement
  supporter les index btree, et des parties du systèmes qui sont éloignées des
  méthodes d'accès btree les utilisant.
 </para>

</sect1>

<sect1 id="btree-behavior">
 <title>Comportement des classes d'opérateur B-Tree</title>

 <para>
  Comme montré dans <xref linkend="xindex-btree-strat-table"/>, une classe d'opérateur
  btree doit fournir cinq opérateurs de comparaison,
  <literal>&lt;</literal>,
  <literal>&lt;=</literal>,
  <literal>=</literal>,
  <literal>&gt;=</literal> et
  <literal>&gt;</literal>.
  On pourrait supposer que <literal>&lt;&gt;</literal> devraient également faire
  partie de la classe d'opérateur, mais ce n'est pas le cas car cela ne serait
  presque jamais utile d'utiliser une clause WHERE <literal>&lt;&gt;</literal>
  dans une recherche d'index.  (Dans certains cas, le planificateur traite
  <literal>&lt;&gt;</literal> comme s'il était associé avec une classe
  d'opérateur btree&nbsp;; mais il trouve cet opérateur via le lien du négateur de
  l'opérateur <literal>=</literal>, plutôt que depuis
  <structname>pg_amop</structname>.)
 </para>

 <para>
  Quand plusieurs types de données partagent des sémantiques de tri presque
  identiques, leurs classes d'opérateurs peuvent être regroupées dans une famille
  d'opérateur.  Il est avantageux de procéder ainsi car cela permet au
  planificateur de faire des déductions quant aux comparaisons entre plusieurs
  types.  Chaque classe d'opérateur au sein d'une famille devrait contenir les
  opérateurs concernant un seul type (et les fonctions de support associées),
  tandis que les opérateurs de comparaison inter-types et les fonctions de
  support sont <quote>libres</quote> dans la famille.  Il est recommandé
  qu'un ensemble complet d'opérateurs inter-types soit inclus dans la famille,
  afin d'assurer que le planificateur puisse représenter n'importe quelle
  condition de comparaison qu'il pourrait déduire depuis la transitivité.
 </para>

 <para>
  Il y a des supposition basiques qu'une famille d'opérateur btree doit
  satisfaire&nbsp;:
 </para>

 <itemizedlist>
  <listitem>
   <para>
    Un opérateur <literal>=</literal> doit être une relation d'équivalence&nbsp;;
    c'est-à-dire que pour toutes les valeurs non nulles
    <replaceable>A</replaceable>,
    <replaceable>B</replaceable>, <replaceable>C</replaceable> du type de
    données&nbsp;:

    <itemizedlist>
     <listitem>
      <para>
       <replaceable>A</replaceable> <literal>=</literal>
       <replaceable>A</replaceable> est vrai
       (<firstterm>loi de réflexivité</firstterm>)
      </para>
     </listitem>
     <listitem>
      <para>
       si <replaceable>A</replaceable> <literal>=</literal>
       <replaceable>B</replaceable>,
       alors <replaceable>B</replaceable> <literal>=</literal>
       <replaceable>A</replaceable>
       (<firstterm>loi de symétrie</firstterm>)
      </para>
     </listitem>
     <listitem>
      <para>
       si <replaceable>A</replaceable> <literal>=</literal>
       <replaceable>B</replaceable> et <replaceable>B</replaceable>
       <literal>=</literal> <replaceable>C</replaceable>,
       alors <replaceable>A</replaceable> <literal>=</literal>
       <replaceable>C</replaceable>
       (<firstterm>loi de transitivité</firstterm>)
      </para>
     </listitem>
    </itemizedlist>
   </para>
  </listitem>

  <listitem>
   <para>
    Un opérateur <literal>&lt;</literal> doit être une relation de tri forte&nbsp;;
    c'est-à-dire, pour toutes les valeurs non nulles
    <replaceable>A</replaceable>, <replaceable>B</replaceable>,
    <replaceable>C</replaceable>&nbsp;:

    <itemizedlist>
     <listitem>
      <para>
       <replaceable>A</replaceable> <literal>&lt;</literal>
       <replaceable>A</replaceable> est faux
       (<firstterm>loi d'antiréflexivité</firstterm>)
      </para>
     </listitem>
     <listitem>
      <para>
       si <replaceable>A</replaceable> <literal>&lt;</literal>
       <replaceable>B</replaceable>
       et <replaceable>B</replaceable> <literal>&lt;</literal>
       <replaceable>C</replaceable>,
       alors <replaceable>A</replaceable> <literal>&lt;</literal>
       <replaceable>C</replaceable>
       (<firstterm>loi de transitivité</firstterm>)
      </para>
     </listitem>
    </itemizedlist>
   </para>
  </listitem>

  <listitem>
   <para>
    De plus, le tri est total&nbsp;; c'est-à-dire, pour toutes les valeurs non nulles
    <replaceable>A</replaceable>, <replaceable>B</replaceable>&nbsp;:

    <itemizedlist>
     <listitem>
      <para>
       exactement une seule des expressions
       <replaceable>A</replaceable> <literal>&lt;</literal>
       <replaceable>B</replaceable>, <replaceable>A</replaceable>
       <literal>=</literal> <replaceable>B</replaceable>, et
       <replaceable>B</replaceable> <literal>&lt;</literal>
       <replaceable>A</replaceable> est vraie
       (<firstterm>loi de trichotomie</firstterm>)
      </para>
     </listitem>
    </itemizedlist>

    (Bien entendu, la loi de trichotomie justifie la définition de la fonction
    de support de comparaison).
   </para>
  </listitem>
 </itemizedlist>

 <para>
  Les trois autres opérateurs sont définis avec <literal>=</literal>
  et <literal>&lt;</literal> de manière évidente, et doivent se comporter de
  manière cohérentes avec ceux-ci.
 </para>

 <para>
  Pour une famille d'opérateur supportant plusieurs types de données, les lois
  définies auparavant doivent continuer à s'appliquer quand
  <replaceable>A</replaceable>, <replaceable>B</replaceable>,
  <replaceable>C</replaceable> sont pris de n'importe quel type de données
  de la famille.  Les lois de transitivité sont les plus délicates à garantir,
  car, dans des situations inter-types, elles représentent des déclarations comme
  quoi les comportements de deux ou trois différents opérateurs sont cohérents.
  Comme exemple, mettre <type>float8</type> et <type>numeric</type> dans la
  même famille d'opérateur ne fonctionnerait pas, du moins pas avec les
  sémantiques actuelles qui définissent que les valeurs de type
  <type>numeric</type> sont converties en <type>float8</type> pour la
  comparaison vers un <type>float8</type>.  Du fait de la précision limitée du
  type <type>float8</type>, cela veut dire que des valeurs
  <type>numeric</type> distinctes seraient considérées par la comparaison
  comme égales à la même valeur <type>float8</type>, et par conséquent la loi
  de transitivé échouerait.
 </para>

 <para>
  Une autre exigence pour les familles contenant plusieurs types est que les
  transtypages implicites ou de coercition binaire qui sont définis entre les
  types de données inclus dans la famille d'opérateur ne doivent pas changer
  l'ordre de tri associé.
 </para>

 <para>
  La raison pour laquelle les index btree nécessitent que ces lois soient
  vérifiées pour un même type de données devraient être tout à fait claires&nbsp;:
  sans celles-ci, il n'y a pas d'ordre avec lequel organiser les clés.  En outre,
  les recherches d'index utilisant une clé de comparaison d'un type de données
  différent nécessitent que la comparaison se comporte sainement à travers deux
  types de données.  Les extensions à trois types de données ou plus au sein
  d'une famille ne sont pas strictement requis par le mécanisme d'index btree
  lui-même, mais le planificateur se repose sur eux pour des besoins
  d'optimisation.
 </para>

</sect1>

<sect1 id="btree-support-funcs">
 <title>Fonctions de support B-Tree</title>

 <para>
  Comme montré dans <xref linkend="xindex-btree-support-table"/>, btree définit
  une fonction de support obligatoire et trois facultatives. Les quatre
  méthodes définies par l'utilisateur sont&nbsp;:
 </para>

 <variablelist>
  <varlistentry>
   <term><function>order</function></term>
   <listitem>
    <para>
     Pour chaque combinaison de types de données pour laquelle une famille
     d'opérateur btree fournit des opérateurs de comparaison, elle doit fournir une
     fonction de support de comparaison inscrite dans
     <structname>pg_amproc</structname> avec la fonction de support 1 et
     <structfield>amproclefttype</structfield>/<structfield>amprocrighttype</structfield>
     égaux aux types de données gauche et droit pour la comparaison (c'est-à-dire
     les même types de données que l'opérateur correspondant a inscrit dans
     <structname>pg_amop</structname>).
     La fonction de comparaison doit prendre en entrée deux valeurs non nulles
     <replaceable>A</replaceable> et <replaceable>B</replaceable> et retourner une
     valeur <type>int32</type> qui est
     <literal>&lt;</literal> <literal>0</literal>, <literal>0</literal>,
     ou <literal>&gt;</literal> <literal>0</literal>
     quand, respectivement <replaceable>A</replaceable> <literal>&lt;</literal>
     <replaceable>B</replaceable>, <replaceable>A</replaceable>
     <literal>=</literal> <replaceable>B</replaceable>,
     ou <replaceable>A</replaceable> <literal>&gt;</literal>
     <replaceable>B</replaceable>. Une valeur de retour NULL est également
     interdite&nbsp;: toutes les valeurs du type de données doivent être
     comparables. Voir
     <filename>src/backend/access/nbtree/nbtcompare.c</filename> pour plus
     d'exemples.
    </para>

    <para>
     Si les valeurs comparées sont d'un type avec collation, l'identifiant de
     collation approprié sera passé à la fonction de support de comparaison, en
     utilisant le mécanisme standard <function>PG_GET_COLLATION()</function>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><function>sortsupport</function></term>
   <listitem>
    <para>
     De manière facultative, une famille d'opérateur btree peut fournir une ou
     plusieurs fonctions <firstterm>sort support</firstterm>, inscrites comme
     fonctions de support numéro 2.  Ces fonctions permettent d'implémenter des
     comparaisons dans l'optique de tri de manière plus efficace qu'appeler
     naivement la fonction de support de comparaison.  Les API impliquées pour
     cela sont définies dans <filename>src/include/utils/sortsupport.h</filename>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><function>inrange</function></term>
   <listitem>
    <indexterm>
     <primary>fonctions de support in_range</primary>
    </indexterm>
    <indexterm>
     <primary>fonctions de support</primary>
     <secondary>in_range</secondary>
    </indexterm>

    <para>
     De manière facultative, une famille d'opérateur btree peut fournir une ou
     plusieurs fonctions de support <firstterm>in_range</firstterm> inscrites comme
     fonction de support numéro 3.  Celles-ci ne sont pas utilisées durant les
     opérations d'index btree&nbsp;; mais plutôt, elles étendent les sémantiques de la
     famille d'opérateur de telle manière qu'elles puissent supporter les clauses de
     fenêtrage contenant les types de limite de cadre
     <literal>RANGE</literal> <replaceable>décalage</replaceable>
     <literal>PRECEDING</literal>
     et <literal>RANGE</literal> <replaceable>décalage</replaceable>
     <literal>FOLLOWING</literal> (voir
     <xref linkend="syntax-window-functions"/>).  Fondamentalement, les
     informations supplémentaires fournies sont comment additionner et soustraire
     une valeur d'un <replaceable>décalage</replaceable> d'une manière qui est
     compatible avec le tri de données de la famille.
    </para>

    <para>
     Une fonction <function>in_range</function> doit avoir la signature
<synopsis>
in_range(<replaceable>val</replaceable> type1, <replaceable>base</replaceable> type1, <replaceable>offset</replaceable> type2, <replaceable>sub</replaceable> bool, <replaceable>less</replaceable> bool)
returns bool
</synopsis>
     <replaceable>val</replaceable> et <replaceable>base</replaceable> doivent
     être du même type, qui est un des types supportés par la famille d'opérateur
     (c'est-à-dire un type pour lequel elle fournit un tri).  Cependant,
     <replaceable>offset</replaceable> peut être d'un type de données différent,
     qui peut par ailleurs ne pas être supporté par la famille.  Un exemple est
     que la famille <literal>time_ops</literal> incluse par défaut fournit une
     fonction <function>in_range</function> qui a un
     <replaceable>offset</replaceable> de type <type>interval</type>.
     Une famille peut fournir des fonctions <function>in_range</function> pour
     n'importe lesquels des types de données qu'elle supporte, et un ou plusieurs types
     <replaceable>offset</replaceable>.  Chaque fonction
     <function>in_range</function> devrait être inscrite dans
     <structname>pg_amproc</structname>
     avec <structfield>amproclefttype</structfield> égal à <type>type1</type>
     et <structfield>amprocrighttype</structfield> égal à <type>type2</type>.
    </para>

    <para>
     Les sémantiques essentielles pour une fonction <function>in_range</function>
     dépendent des deux paramètres de drapeau booléens.  Elle devrait ajouter ou
     soustraire <replaceable>base</replaceable> et
     <replaceable>offset</replaceable>, puis comparer
     <replaceable>val</replaceable> au résultat, comme ceci&nbsp;:
     <itemizedlist>
      <listitem>
       <para>
        si <literal>!</literal><replaceable>sub</replaceable> et
        <literal>!</literal><replaceable>less</replaceable>,
        renvoyer <replaceable>val</replaceable> <literal>&gt;=</literal>
        (<replaceable>base</replaceable> <literal>+</literal>
        <replaceable>offset</replaceable>)
       </para>
      </listitem>
      <listitem>
       <para>
        si <literal>!</literal><replaceable>sub</replaceable>
        et <replaceable>less</replaceable>,
        renvoyer <replaceable>val</replaceable> <literal>&lt;=</literal>
        (<replaceable>base</replaceable> <literal>+</literal>
        <replaceable>offset</replaceable>)
       </para>
      </listitem>
      <listitem>
       <para>
        si <replaceable>sub</replaceable>
        et <literal>!</literal><replaceable>less</replaceable>,
        renvoyer <replaceable>val</replaceable> <literal>&gt;=</literal>
        (<replaceable>base</replaceable> <literal>-</literal>
        <replaceable>offset</replaceable>)
       </para>
      </listitem>
      <listitem>
       <para>
        si <replaceable>sub</replaceable> et <replaceable>less</replaceable>,
        renvoyer <replaceable>val</replaceable> <literal>&lt;=</literal>
        (<replaceable>base</replaceable> <literal>-</literal>
        <replaceable>offset</replaceable>)
       </para>
      </listitem>
     </itemizedlist>
     Avant de procéder, la fonction devrait vérifier le signe d'<replaceable>
     offset</replaceable>&nbsp;: s'il est inférieur à zéro, lever l'erreur
     <literal>ERRCODE_INVALID_PRECEDING_OR_FOLLOWING_SIZE</literal> (22013)
     avec un message d'erreur tel que <quote>taille précédente ou suivante invalide
     dans la fonction de fenêtrage</quote>.  (Cela est requis par le standard SQL,
     bien que des familles d'opérateur non standards pourraient peut être choisir
     d'ignorer cette restriction, puisqu'il n'y a pas vraiment de nécessité de
     sémantique dans ce cas.)  Cette exigence est déléguée à la fonction
     <function>in_range</function> si bien que le code du moteur n'a pas besoin de
     comprendre ce que <quote>inférieur à zéro</quote> signifie pour un type de
     données particulier.
    </para>

    <para>
     Une autre attente est que les fonctions <function>in_range</function>
     devraient, si applicable, éviter de générer une erreur si
     <replaceable>base</replaceable> <literal>+</literal>
     <replaceable>offset</replaceable>
     ou <replaceable>base</replaceable> <literal>-</literal>
     <replaceable>offset</replaceable> devait causer un débordement.
     Le résultat de comparaison correct peut être déterminé même si cette valeur
     devait être en dehors de l'intervalle des valeurs du type de données.
     Notez que si le type de données inclut des concepts tels que
     <quote>infinity</quote> ou <quote>NaN</quote>, des précautions supplémentaires
     pourraient être nécessaires pour s'assurer que les resultats de
     <function>in_range</function> soient en accord avec l'ordre de tri normal de la
     famille d'opérateur.
    </para>

    <para>
     Les résultats de la fonction <function>in_range</function> doivent être
     cohérents avec l'ordre de tri imposé par la famille d'opérateur.  Pour être
     précis, pour n'importe quelles valeurs fixées de
     <replaceable>offset</replaceable> et <replaceable>sub</replaceable>, alors&nbsp;:
     <itemizedlist>
      <listitem>
       <para>
        Si <function>in_range</function> avec <replaceable>less</replaceable> =
        true est vrai pour certains <replaceable>val1</replaceable>
        et <replaceable>base</replaceable>, il doit être vrai pour chaque
        <replaceable>val2</replaceable> <literal>&lt;=</literal>
        <replaceable>val1</replaceable> avec le même
        <replaceable>base</replaceable>.
       </para>
      </listitem>
      <listitem>
       <para>
        Si <function>in_range</function> avec <replaceable>less</replaceable> =
        true est faux pour certains <replaceable>val1</replaceable>
        et <replaceable>base</replaceable>, il doit être faux pour chaque
        <replaceable>val2</replaceable> <literal>&gt;=</literal>
        <replaceable>val1</replaceable> avec le même
        <replaceable>base</replaceable>.
       </para>
      </listitem>
      <listitem>
       <para>
        Si <function>in_range</function> avec <replaceable>less</replaceable> =
        true est vrai pour certains <replaceable>val</replaceable>
        et <replaceable>base1</replaceable>, il doit être vrai pour chaque
        <replaceable>base2</replaceable> <literal>&gt;=</literal>
        <replaceable>base1</replaceable> avec le même
        <replaceable>val</replaceable>.
       </para>
      </listitem>
      <listitem>
       <para>
        Si <function>in_range</function> avec <replaceable>less</replaceable> =
        true est faux pour certains <replaceable>val</replaceable>
        et <replaceable>base1</replaceable>, il doit être faux pour chaque
        <replaceable>base2</replaceable> <literal>&lt;=</literal>
        <replaceable>base1</replaceable> avec le même
        <replaceable>val</replaceable>.
       </para>
      </listitem>
     </itemizedlist>
     Des déclarations similaires avec des conditions inversées continuent à
     s'appliquer quand <replaceable>less</replaceable> = false.
    </para>

    <para>
     Si le type est trié (<type>type1</type>) par rapport à une collation, l'OID de collation
     approprié sera passé à la fonction <function>in_range</function> en utilisant
     le mécanisme standard <function>PG_GET_COLLATION()</function>.
    </para>

    <para>
     Les fonctions <function>in_range</function> n'ont pas besoin de gérer les
     valeurs en entrée NULL, et typiquement elles seront marquées comme strict.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><function>equalimage</function></term>
   <listitem>
    <para>
     Optionally, a btree operator family may provide
     <function>equalimage</function> (<quote>equality implies image
      equality</quote>) support functions, registered under support
     function number 4.  These functions allow the core code to
     determine when it is safe to apply the btree deduplication
     optimization.  Currently, <function>equalimage</function>
     functions are only called when building or rebuilding an index.
    </para>

    <para>
     An <function>equalimage</function> function must have the
     signature
<synopsis>
equalimage(<replaceable>opcintype</replaceable> <type>oid</type>) returns bool
</synopsis>
     The return value is static information about an operator class
     and collation.  Returning <literal>true</literal> indicates that
     the <function>order</function> function for the operator class is
     guaranteed to only return <literal>0</literal> (<quote>arguments
      are equal</quote>) when its <replaceable>A</replaceable> and
     <replaceable>B</replaceable> arguments are also interchangeable
     without any loss of semantic information.  Not registering an
     <function>equalimage</function> function or returning
     <literal>false</literal> indicates that this condition cannot be
     assumed to hold.
    </para>

    <para>
     The <replaceable>opcintype</replaceable> argument is the
     <literal><structname>pg_type</structname>.oid</literal> of the
     data type that the operator class indexes.  This is a convenience
     that allows reuse of the same underlying
     <function>equalimage</function> function across operator classes.
     If <replaceable>opcintype</replaceable> is a collatable data
     type, the appropriate collation OID will be passed to the
     <function>equalimage</function> function, using the standard
     <function>PG_GET_COLLATION()</function> mechanism.
    </para>
 
    <para>
     As far as the operator class is concerned, returning
     <literal>true</literal> indicates that deduplication is safe (or
     safe for the collation whose OID was passed to its
     <function>equalimage</function> function).  However, the core
     code will only deem deduplication safe for an index when
     <emphasis>every</emphasis> indexed column uses an operator class
     that registers an <function>equalimage</function> function, and
     each function actually returns <literal>true</literal> when
     called.
    </para>

    <para>
     Image equality is <emphasis>almost</emphasis> the same condition
     as simple bitwise equality.  There is one subtle difference: When
     indexing a varlena data type, the on-disk representation of two
     image equal datums may not be bitwise equal due to inconsistent
     application of <acronym>TOAST</acronym> compression on input.
     Formally, when an operator class's
     <function>equalimage</function> function returns
     <literal>true</literal>, it is safe to assume that the
     <literal>datum_image_eq()</literal> C function will always agree
     with the operator class's <function>order</function> function
     (provided that the same collation OID is passed to both the
     <function>equalimage</function> and <function>order</function>
     functions).
    </para>

    <para>
     The core code is fundamentally unable to deduce anything about
     the <quote>equality implies image equality</quote> status of an
     operator class within a multiple-data-type family based on
     details from other operator classes in the same family.  Also, it
     is not sensible for an operator family to register a cross-type
     <function>equalimage</function> function, and attempting to do so
     will result in an error.  This is because <quote>equality implies
      image equality</quote> status does not just depend on
     sorting/equality semantics, which are more or less defined at the
     operator family level.  In general, the semantics that one
     particular data type implements must be considered separately.
    </para>

    <para>
     The convention followed by the operator classes included with the
     core <productname>PostgreSQL</productname> distribution is to
     register a stock, generic <function>equalimage</function>
     function.  Most operator classes register
     <function>btequalimage()</function>, which indicates that
     deduplication is safe unconditionally.  Operator classes for
     collatable data types such as <type>text</type> register
     <function>btvarstrequalimage()</function>, which indicates that
     deduplication is safe with deterministic collations.  Best
     practice for third-party extensions is to register their own
     custom function to retain control.
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</sect1>

<sect1 id="btree-implementation">
 <title>Implémentation</title>

 <para>
  This section covers B-Tree index implementation details that may be
  of use to advanced users.  See
  <filename>src/backend/access/nbtree/README</filename> in the source
  distribution for a much more detailed, internals-focused description
  of the B-Tree implementation.
 </para>

 <sect2 id="btree-structure">
  <title>B-Tree Structure</title>
  <para>
   <productname>PostgreSQL</productname> B-Tree indexes are
   multi-level tree structures, where each level of the tree can be
   used as a doubly-linked list of pages.  A single metapage is stored
   in a fixed position at the start of the first segment file of the
   index.  All other pages are either leaf pages or internal pages.
   Leaf pages are the pages on the lowest level of the tree.  All
   other levels consist of internal pages.  Each leaf page contains
   tuples that point to table rows.  Each internal page contains
   tuples that point to the next level down in the tree.  Typically,
   over 99% of all pages are leaf pages.  Both internal pages and leaf
   pages use the standard page format described in <xref
    linkend="storage-page-layout"/>.
  </para>
  <para>
   New leaf pages are added to a B-Tree index when an existing leaf
   page cannot fit an incoming tuple.  A <firstterm>page
    split</firstterm> operation makes room for items that originally
   belonged on the overflowing page by moving a portion of the items
   to a new page.  Page splits must also insert a new
   <firstterm>downlink</firstterm> to the new page in the parent page,
   which may cause the parent to split in turn.  Page splits
   <quote>cascade upwards</quote> in a recursive fashion.  When the
   root page finally cannot fit a new downlink, a <firstterm>root page
    split</firstterm> operation takes place.  This adds a new level to
   the tree structure by creating a new root page that is one level
   above the original root page.
  </para>
 </sect2>

 <sect2 id="btree-deduplication">
  <title>Deduplication</title>
  <para>
   A duplicate is a leaf page tuple (a tuple that points to a table
   row) where <emphasis>all</emphasis> indexed key columns have values
   that match corresponding column values from at least one other leaf
   page tuple that's close by in the same index.  Duplicate tuples are
   quite common in practice.  B-Tree indexes can use a special,
   space-efficient representation for duplicates when an optional
   technique is enabled: <firstterm>deduplication</firstterm>.
  </para>
  <para>
   Deduplication works by periodically merging groups of duplicate
   tuples together, forming a single posting list tuple for each
   group.  The column key value(s) only appear once in this
   representation.  This is followed by a sorted array of
   <acronym>TID</acronym>s that point to rows in the table.  This
   significantly reduces the storage size of indexes where each value
   (or each distinct combination of column values) appears several
   times on average.  The latency of queries can be reduced
   significantly.  Overall query throughput may increase
   significantly.  The overhead of routine index vacuuming may also be
   reduced significantly.
  </para>
  <note>
   <para>
    While NULL is generally not considered to be equal to any other
    value, including NULL, NULL is nevertheless treated as just
    another value from the domain of indexed values by the B-Tree
    implementation (except when enforcing uniqueness in a unique
    index).  B-Tree deduplication is therefore just as effective with
    <quote>duplicates</quote> that contain a NULL value.
   </para>
  </note>
  <para>
   The deduplication process occurs lazily, when a new item is
   inserted that cannot fit on an existing leaf page.  This prevents
   (or at least delays) leaf page splits.  Unlike GIN posting list
   tuples, B-Tree posting list tuples do not need to expand every time
   a new duplicate is inserted; they are merely an alternative
   physical representation of the original logical contents of the
   leaf page.  This design prioritizes consistent performance with
   mixed read-write workloads.  Most client applications will at least
   see a moderate performance benefit from using deduplication.
   Deduplication is enabled by default.
  </para>
  <para>
   Write-heavy workloads that don't benefit from deduplication due to
   having few or no duplicate values in indexes will incur a small,
   fixed performance penalty (unless deduplication is explicitly
   disabled).  The <literal>deduplicate_items</literal> storage
   parameter can be used to disable deduplication within individual
   indexes.  There is never any performance penalty with read-only
   workloads, since reading posting list tuples is at least as
   efficient as reading the standard tuple representation.  Disabling
   deduplication isn't usually helpful.
  </para>
  <para>
   B-Tree indexes are not directly aware that under MVCC, there might
   be multiple extant versions of the same logical table row; to an
   index, each tuple is an independent object that needs its own index
   entry.  Thus, an update of a row always creates all-new index
   entries for the row, even if the key values did not change.  Some
   workloads suffer from index bloat caused by these
   implementation-level version duplicates (this is typically a
   problem for <command>UPDATE</command>-heavy workloads that cannot
   apply the <acronym>HOT</acronym> optimization due to modifying at
   least one indexed column).  B-Tree deduplication does not
   distinguish between these implementation-level version duplicates
   and conventional duplicates.  Deduplication can nevertheless help
   with controlling index bloat caused by implementation-level version
   churn.
  </para>
  <tip>
   <para>
    A special heuristic is applied to determine whether a
    deduplication pass in a unique index should take place.  It can
    often skip straight to splitting a leaf page, avoiding a
    performance penalty from wasting cycles on unhelpful deduplication
    passes.  If you're concerned about the overhead of deduplication,
    consider setting <literal>deduplicate_items = off</literal>
    selectively.  Leaving deduplication enabled in unique indexes has
    little downside.
   </para>
  </tip>
  <para>
   Deduplication cannot be used in all cases due to
   implementation-level restrictions.  Deduplication safety is
   determined when <command>CREATE INDEX</command> or
   <command>REINDEX</command> is run.
  </para>
  <para>
   Note that deduplication is deemed unsafe and cannot be used in the
   following cases involving semantically significant differences
   among equal datums:
  </para>
  <para>
   <itemizedlist>
    <listitem>
     <para>
      <type>text</type>, <type>varchar</type>, and <type>char</type>
      cannot use deduplication when a
      <emphasis>nondeterministic</emphasis> collation is used.  Case
      and accent differences must be preserved among equal datums.
     </para>
    </listitem>

    <listitem>
     <para>
      <type>numeric</type> cannot use deduplication.  Numeric display
      scale must be preserved among equal datums.
     </para>
    </listitem>

    <listitem>
     <para>
      <type>jsonb</type> cannot use deduplication, since the
      <type>jsonb</type> B-Tree operator class uses
      <type>numeric</type> internally.
     </para>
    </listitem>

    <listitem>
     <para>
      <type>float4</type> and <type>float8</type> cannot use
      deduplication.  These types have distinct representations for
      <literal>-0</literal> and <literal>0</literal>, which are
      nevertheless considered equal.  This difference must be
      preserved.
     </para>
    </listitem>
   </itemizedlist>
  </para>
  <para>
   There is one further implementation-level restriction that may be
   lifted in a future version of
   <productname>PostgreSQL</productname>:
  </para>
  <para>
   <itemizedlist>
    <listitem>
     <para>
      Container types (such as composite types, arrays, or range
      types) cannot use deduplication.
     </para>
    </listitem>
   </itemizedlist>
  </para>
  <para>
   There is one further implementation-level restriction that applies
   regardless of the operator class or collation used:
  </para>
  <para>
   <itemizedlist>
    <listitem>
     <para>
      <literal>INCLUDE</literal> indexes can never use deduplication.
     </para>
    </listitem>
   </itemizedlist>
  </para>
 
 </sect2>

</sect1>

</chapter>
