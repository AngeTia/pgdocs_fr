<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->

<sect1 id="intarray" xreflabel="intarray">
 <title>intarray</title>

 <indexterm zone="intarray">
  <primary>intarray</primary>
 </indexterm>

 <para>
  Le module <filename>intarray</filename> fournit un certain nombre de
  fonctions et d'opérateurs utiles pour manipuler des tableaux d'entiers sans
  valeurs NULL. Il y a aussi un support pour les recherches par index en
  utilisant certains des opérateurs.
 </para>

 <para>
  Toutes ces opérations rejeteront une erreur si un tableau fourni contient
  des éléments NULL.
 </para>

 <para>
  La plupart des opérations sont seulement intéressants pour des tableaux à
  une dimension. Bien qu'elles accepteront des tableaux à plusieurs dimensions,
  les données sont traitées comme s'il y avait un tableau linéaire.
 </para>

 <para>
  This module is considered <quote>trusted</quote>, that is, it can be
  installed by non-superusers who have <literal>CREATE</literal> privilege
  on the current database.
 </para>

 <sect2>
  <title>Fonctions et opérateurs d'<filename>intarray</filename></title>

  <para>
   Les fonctions fournies par le module <filename>intarray</filename>
   sont affichées dans <xref linkend="intarray-func-table"/> alors que
   les opérateurs sont indiqués dans <xref linkend="intarray-op-table"/>.
  </para>

  <table id="intarray-func-table">
   <title>Fonctions <filename>intarray</filename></title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        Function
       </para>
       <para>
        Description
       </para>
       <para>
        Example(s)
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>icount</primary></indexterm>
        <function>icount</function> ( <type>integer[]</type> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        Returns the number of elements in the array.
       </para>
       <para>
        <literal>icount('{1,2,3}'::integer[])</literal>
        <returnvalue>3</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>sort</primary></indexterm>
        <function>sort</function> ( <type>integer[]</type>, <parameter>dir</parameter> <type>text</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        Sorts the array in either ascending or descending order.
        <parameter>dir</parameter> must be <literal>asc</literal>
        or <literal>desc</literal>.
       </para>
       <para>
        <literal>sort('{1,3,2}'::integer[], 'desc')</literal>
        <returnvalue>{3,2,1}</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>sort</function> ( <type>integer[]</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para role="func_signature">
        <indexterm><primary>sort_asc</primary></indexterm>
        <function>sort_asc</function> ( <type>integer[]</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        Sorts in ascending order.
       </para>
       <para>
        <literal>sort(array[11,77,44])</literal>
        <returnvalue>{11,44,77}</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>sort_desc</primary></indexterm>
        <function>sort_desc</function> ( <type>integer[]</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        Sorts in descending order.
       </para>
       <para>
        <literal>sort_desc(array[11,77,44])</literal>
        <returnvalue>{77,44,11}</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>uniq</primary></indexterm>
        <function>uniq</function> ( <type>integer[]</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        Removes adjacent duplicates.
       </para>
       <para>
        <literal>uniq(sort('{1,2,3,2,1}'::integer[]))</literal>
        <returnvalue>{1,2,3}</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>idx</primary></indexterm>
        <function>idx</function> ( <type>integer[]</type>, <parameter>item</parameter> <type>integer</type> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        Returns index of the first array element
        matching <parameter>item</parameter>, or 0 if no match.
       </para>
       <para>
        <literal>idx(array[11,22,33,22,11], 22)</literal>
        <returnvalue>2</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>subarray</primary></indexterm>
        <function>subarray</function> ( <type>integer[]</type>, <parameter>start</parameter> <type>integer</type>, <parameter>len</parameter> <type>integer</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        Extracts the portion of the array starting at
        position <parameter>start</parameter>, with <parameter>len</parameter>
        elements.
       </para>
       <para>
        <literal>subarray('{1,2,3,2,1}'::integer[], 2, 3)</literal>
        <returnvalue>{2,3,2}</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>subarray</function> ( <type>integer[]</type>, <parameter>start</parameter> <type>integer</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        Extracts the portion of the array starting at
        position <parameter>start</parameter>.
       </para>
       <para>
        <literal>subarray('{1,2,3,2,1}'::integer[], 2)</literal>
        <returnvalue>{2,3,2,1}</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>intset</primary></indexterm>
        <function>intset</function> ( <type>integer</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        Makes a single-element array.
       </para>
       <para>
        <literal>intset(42)</literal>
        <returnvalue>{42}</returnvalue>
       </para></entry>
      </row>
    </tbody>
   </tgroup>
  </table>

  <table id="intarray-op-table">
   <title>Opérateurs d'<filename>intarray</filename></title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        Operator
       </para>
       <para>
        Description
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>&amp;&amp;</literal> <type>integer[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Do arrays overlap (have at least one element in common)?
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>@&gt;</literal> <type>integer[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Does left array contain right array?
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>&lt;@</literal> <type>integer[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Is left array contained in right array?
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type></type> <literal>#</literal> <type>integer[]</type>
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        Returns the number of elements in the array.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>#</literal> <type>integer</type>
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        Returns index of the first array element
        matching the right argument, or 0 if no match.
        (Same as <function>idx</function> function.)
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>+</literal> <type>integer</type>
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        Adds element to end of array.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>+</literal> <type>integer[]</type>
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        Concatenates the arrays.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>-</literal> <type>integer</type>
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        Removes entries matching the right argument from the array.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>-</literal> <type>integer[]</type>
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        Removes elements of the right array from the left array.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>|</literal> <type>integer</type>
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        Computes the union of the arguments.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>|</literal> <type>integer[]</type>
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        Computes the union of the arguments.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>&amp;</literal> <type>integer[]</type>
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        Computes the intersection of the arguments.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>@@</literal> <type>query_int</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Does array satisfy query?  (see below)
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>query_int</type> <literal>~~</literal> <type>integer[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Does array satisfy query?  (commutator of <literal>@@</literal>)
       </para></entry>
      </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   (Avant PostgreSQL 8.2, les opérateurs de contenance <literal>@&gt;</literal>
   et <literal>&lt;@</literal> étaient respectivement appelés
   <literal>@</literal> et <literal>~</literal>. Ces noms sont toujours
   disponibles mais sont considérés comme obsolètes et seront un jour supprimés.
   Notez que les anciens noms sont inversés par rapport à la convention
   suivie par les types de données géométriques&nbsp;!)
  </para>

  <para>
   Les opérateurs <literal>&amp;&amp;</literal>, <literal>@&gt;</literal> et
   <literal>&lt;@</literal> sont équivalents aux opérateurs internes
   <productname>PostgreSQL</productname> de même nom, sauf qu'ils travaillent
   sur des tableaux d'entiers, sans valeurs NULL, alors que les opérateurs
   internes travaillent sur des tableaux de tout type. Cette restriction les
   rend plus rapides que les opérateurs internes dans de nombreux cas.
  </para>

  <para>
   Les opérateurs <literal>@@</literal> et <literal>~~</literal> testent si
   un tableau satisfait une <firstterm>requête</firstterm>, qui est exprimée
   comme une valeur d'un type de données spécialisé <type>query_int</type>. Une
   <firstterm>requête</firstterm> consiste en des valeurs de type integer qui
   sont vérifiées avec les éléments du tableau, parfois combinées en utilisant
   les opérateurs <literal>&amp;</literal> (AND), <literal>|</literal> (OR)
   et <literal>!</literal> (NOT). Les parenthèses peuvent être utilisées si
   nécessaire. Par exemple, la requête <literal>1&amp;(2|3)</literal> établit
   une correspondance avec les tableaux qui contiennent 1 et aussi soit 2 soit
   3.
  </para>
 </sect2>

 <sect2>
  <title>Support des index</title>

  <para>
   <filename>intarray</filename> fournit un support d'index pour les opérateurs
   <literal>&amp;&amp;</literal>, <literal>@&gt;</literal>, <literal>&lt;@</literal>
   et <literal>@@</literal>, ainsi que pour l'égalité de tableaux.
  </para>

  <para>
   Deux classes d'opérateur pour index GiST, avec paramètres, sont fournies&nbsp;:
   <literal>gist__int_ops</literal> (utilisé par défaut) convient pour des
   tableaux d'ensembles de données de petites et moyennes tailles alors que
   <literal>gist__intbig_ops</literal> utilise une signature plus importante
   et est donc plus intéressant pour indexer des gros ensembles de données.
   (c'est-à-dire les colonnes contenant un grand nombre de valeurs de tableaux
   distinctes). L'implantation utilise une structure de données RD-tree avec
   une compression interne à perte.
  </para>

  <para>
   <literal>gist__int_ops</literal> approximates an integer set as an array of
   integer ranges.  Its optional integer parameter <literal>numranges</literal>
   determines the maximum number of ranges in
   one index key.  The default value of <literal>numranges</literal> is 100.
   Valid values are between 1 and 253.  Using larger arrays as GiST index
   keys leads to a more precise search (scanning a smaller fraction of the index and
   fewer heap pages), at the cost of a larger index.
  </para>

  <para>
   <literal>gist__intbig_ops</literal> approximates an integer set as a bitmap
   signature.  Its optional integer parameter <literal>siglen</literal>
   determines the signature length in bytes.
   The default signature length is 16 bytes.  Valid values of signature length
   are between 1 and 2024 bytes.  Longer signatures lead to a more precise
   search (scanning a smaller fraction of the index and fewer heap pages), at
   the cost of a larger index.
  </para>

  <para>
   Il y a aussi une classe d'opérateur GIN,<literal>gin__int_ops</literal>
   supportant les mêmes opérateurs, qui n'est pas disponible par défaut.
  </para>

  <para>
   Le choix d'un indexage GiST ou IN dépend des caractéristiques relatives
   de performance qui sont discutées ailleurs.
  </para>
 </sect2>

 <sect2>
  <title>Exemple</title>

  <programlisting>
-- un message peut être dans un ou plusieurs <quote>sections</quote>
CREATE TABLE message (mid INT PRIMARY KEY, sections INT[], ...);

-- crée un index spécialisé with sigature length of 32 bytes
CREATE INDEX message_rdtree_idx ON message USING GIST (sections gist__int_ops(siglen=32));

-- sélectionne les messages dans la section 1 ou 2 - opérateur OVERLAP
SELECT message.mid FROM message WHERE message.sections &amp;&amp; '{1,2}';

-- sélectionne les messages dans sections 1 et 2 - opérateur CONTAINS
SELECT message.mid FROM message WHERE message.sections @&gt; '{1,2}';

-- idem, en utilisant l'opérateur QUERY
SELECT message.mid FROM message WHERE message.sections @@ '1&amp;2'::query_int;
  </programlisting>
 </sect2>

 <sect2>
  <title>Tests de performance</title>

  <para>
   Le répertoire des sources (<filename>contrib/intarray/bench</filename>)
   contient une suite de tests de performance, qui peut être exécutée sur un
   serveur <productname>PostgreSQL</productname> déjà installé. (Cela
   nécessite aussi l'installation de <filename>DBD::Pg</filename>.). Pour
   l'exécuter&nbsp;:
  </para>

  <programlisting>
   cd .../contrib/intarray/bench
   createdb TEST
   psql -c "CREATE EXTENSION intarray" TEST
   ./create_test.pl | psql TEST
   ./bench.pl
  </programlisting>

  <para>
   Le script <filename>bench.pl</filename> contient un grand nombre d'options.
   Elles sont affichées quand il est exécuté sans arguments.
  </para>
 </sect2>


 <sect2>
  <title>Auteurs</title>
  <para>
   Ce travail a été réalisé par Teodor Sigaev (<email>teodor@sigaev.ru</email>)
   et Oleg Bartunov (<email>oleg@sai.msu.su</email>). Voir le
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist">site de
    GiST</ulink> pour des informations supplémentaires. Andrey Oktyabrski a fait
   un gros travail en ajoutant des nouvelles fonctions et opérateurs.
  </para>
 </sect2>

</sect1>

