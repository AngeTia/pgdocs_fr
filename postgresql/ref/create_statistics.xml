<?xml version="1.0" encoding="UTF-8"?>
<!--
doc/src/sgml/ref/create_statistics.sgml
PostgreSQL documentation
-->

<refentry id="sql-createstatistics">
 <indexterm zone="sql-createstatistics">
  <primary>CREATE STATISTICS</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE STATISTICS</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Ordres du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE STATISTICS</refname>
  <refpurpose>définit des statistiques étendues</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <synopsis>
CREATE STATISTICS [ IF NOT EXISTS ] <replaceable class="parameter">statistics_name</replaceable>
    ON ( <replaceable class="parameter">expression</replaceable> )
    FROM <replaceable class="parameter">table_name</replaceable>

CREATE STATISTICS [ IF NOT EXISTS ] <replaceable class="parameter">nom_statistiques</replaceable>
    [ ( <replaceable class="parameter">type_statistique</replaceable> [, ... ] ) ]
    ON <replaceable class="parameter">nom_colonne</replaceable>, <replaceable class="parameter">nom_colonne</replaceable> [, ...]
    FROM <replaceable class="parameter">nom_table</replaceable>
  </synopsis>

 </refsynopsisdiv>

 <refsect1 id="sql-createstatistics-description">
  <title>Description</title>

  <para>
   <command>CREATE STATISTICS</command> créera un nouvel objet de suivi des
   statistiques étendues sur les données de la table, table distante ou vue
   matérialisée spécifiée. L'objet statistiques sera créé dans la base de
   données courante et son propriétaire sera l'utilisateur exécutant la
   commande.
  </para>

  <para>
   The <command>CREATE STATISTICS</command> command has two basic forms. The
   first form allows univariate statistics for a single expression to be
   collected, providing benefits similar to an expression index without the
   overhead of index maintenance.  This form does not allow the statistics
   kind to be specified, since the various statistics kinds refer only to
   multivariate statistics.  The second form of the command allows
   multivariate statistics on multiple columns and/or expressions to be
   collected, optionally specifying which statistics kinds to include.  This
   form will also automatically cause univariate statistics to be collected on
   any expressions included in the list.
  </para>

  <para>
   Si un nom de schéma est donné (par exemple, <literal>CREATE STATISTICS
    monschema.mastat ...</literal>) alors l'objet statistiques est crée dans le
   schéma spécifié. Autrement, il sera crée dans le schéma courant. Le nom de
   l'objet statistiques doit être différent du nom de tous les autres objets
   statistiques dans le même schéma.
  </para>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>

   <varlistentry>
    <term><literal>IF NOT EXISTS</literal></term>
    <listitem>
     <para>
      Ne renvoie pas d'erreur si un objet statistiques de même nom existe déjà.
      Une note est affichée dans ce cas. Veuiller noter que seul le nom de
      l'objet statistiques est pris en compte ici, et non pas le détail de sa
      définition.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom_statistiques</replaceable></term>
    <listitem>
     <para>
      Le nom (éventuellement qualifié du nom du schéma) de l'objet statistiques
      devant être crée.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">type_statistique</replaceable></term>
    <listitem>
     <para>
      Un type de statistique multivarié devant être calculé dans cet objet statistiques.
      Les types actuellement supportés sont
      <literal>ndistinct</literal>, qui active des statistiques n-distinct,
      <literal>dependencies</literal> qui active des statistiques de dépendances
      fonctionnelles, et <literal>mcv</literal> qui active les listes
      des valeurs les plus fréquentes.
      Si cette clause est omise, tous les types statistiques supportés sont
      inclus dans l'objet statistique. Univariate expression statistics are
      built automatically if the statistics definition includes any complex
      expressions rather than just simple column references.
      Pour plus d'informations, voir <xref linkend="planner-stats-extended"/>
      et <xref linkend="multivariate-statistics-examples"/>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom_colonne</replaceable></term>
    <listitem>
     <para>
      Le nom d'une colonne de la table devant être couverte par les
      statistiques calculées.
      This is only allowed when building multivariate statistics.  At least
      two column names or expressions must be specified, and their order is
      not significant.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">expression</replaceable></term>
    <listitem>
     <para>
      An expression to be covered by the computed statistics.  This may be
      used to build univariate statistics on a single expression, or as part
      of a list of multiple column names and/or expressions to build
      multivariate statistics.  In the latter case, separate univariate
      statistics are built automatically for each expression in the list.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom_table</replaceable></term>
    <listitem>
     <para>
      Le nom (éventuellement qualifié du nom du schéma) de la table contenant
      le(s) colonne(s) sur lesquelles les statistiques sont calculées.
     </para>
    </listitem>
   </varlistentry>

  </variablelist>
 </refsect1>

 <refsect1>
  <title>Notes</title>

  <para>
   Vous devez être le propriétaire de la table pour créer un objet statistiques
   lisant ses données. Une fois celui-ci créé, le propriétaire de l'objet
   statistiques est indépendant de la ou les tables sous-jacentes.
  </para>

  <para>
   Expression statistics are per-expression and are similar to creating an
   index on the expression, except that they avoid the overhead of index
   maintenance. Expression statistics are built automatically for each
   expression in the statistics object definition.
  </para>
 </refsect1>

 <refsect1 id="sql-createstatistics-examples">
  <title>Exemples</title>

  <para>
   Créer une table <structname>t1</structname> avec deux colonnes
   fonctionnellement dépendantes, c'est-à-dire que la connaissance de la valeur
   de la première colonne est suffisante pour déterminer la valeur de l'autre
   colonne. Ensuite des statistiques de dépendances fonctionnelles sont
   construites sur ces colonnes :

   <programlisting>
CREATE TABLE t1 (
    a   int,
    b   int
);

INSERT INTO t1 SELECT i/100, i/500
                 FROM generate_series(1,1000000) s(i);

ANALYZE t1;

-- le nombre de lignes correspondantes sera drastiquement sous-estimé :
EXPLAIN ANALYZE SELECT * FROM t1 WHERE (a = 1) AND (b = 0);

CREATE STATISTICS s1 (dependencies) ON a, b FROM t1;

ANALYZE t1;

-- à présent le nombre de ligne estimé est plus précis :
EXPLAIN ANALYZE SELECT * FROM t1 WHERE (a = 1) AND (b = 0);
   </programlisting>

   Sans statistiques fonctionnellement dépendantes, l'optimisateur supposera
   que les deux conditions <literal>WHERE</literal> sont indépendantes, et
   multiplierait leurs sélectivités pour arriver à une estimation du nombre de
   lignes bien trop basse.
   Avec de telles statistiques, l'optimiseur reconnaît que les conditions
   <literal>WHERE</literal> sont redondantes et ne sous-estime plus le nombre
   de lignes.
  </para>

  <para>
   Créer une table <structname>t2</structname> avec deux colonnes parfaitement
   corrélées (contenant des données identiques), et une liste MCV sur ces
   colonnes&nbsp;:

   <programlisting>
CREATE TABLE t2 (
    a   int,
    b   int
);

INSERT INTO t2 SELECT mod(i,100), mod(i,100)
                 FROM generate_series(1,1000000) s(i);

CREATE STATISTICS s2 (mcv) ON a, b FROM t2;

ANALYZE t2;

-- valid combination (found in MCV)
EXPLAIN ANALYZE SELECT * FROM t2 WHERE (a = 1) AND (b = 1);

-- invalid combination (not found in MCV)
EXPLAIN ANALYZE SELECT * FROM t2 WHERE (a = 1) AND (b = 2);
   </programlisting>

   La liste MCV donne au planificateur des informations plus détaillées
   à propos des valeurs spécifiques qui apparaissent le plus fréquemment
   dans la table, de même qu'une borne supérieure sur les sélectivités
   des combinaisons de valeurs qui n'apparaissent pas dans la table,
   lui permettant de générer de meilleures estimations dans les deux cas.
  </para>

  <para>
   Create table <structname>t3</structname> with a single timestamp column,
   and run queries using expressions on that column.  Without extended
   statistics, the planner has no information about the data distribution for
   the expressions, and uses default estimates.  The planner also does not
   realize that the value of the date truncated to the month is fully
   determined by the value of the date truncated to the day. Then expression
   and ndistinct statistics are built on those two expressions:

<programlisting>
CREATE TABLE t3 (
    a   timestamp
);

INSERT INTO t3 SELECT i FROM generate_series('2020-01-01'::timestamp,
                                             '2020-12-31'::timestamp,
                                             '1 minute'::interval) s(i);

ANALYZE t3;

-- the number of matching rows will be drastically underestimated:
EXPLAIN ANALYZE SELECT * FROM t3
  WHERE date_trunc('month', a) = '2020-01-01'::timestamp;

EXPLAIN ANALYZE SELECT * FROM t3
  WHERE date_trunc('day', a) BETWEEN '2020-01-01'::timestamp
                                 AND '2020-06-30'::timestamp;

EXPLAIN ANALYZE SELECT date_trunc('month', a), date_trunc('day', a)
   FROM t3 GROUP BY 1, 2;

-- build ndistinct statistics on the pair of expressions (per-expression
-- statistics are built automatically)
CREATE STATISTICS s3 (ndistinct) ON date_trunc('month', a), date_trunc('day', a) FROM t3;

ANALYZE t3;

-- now the row count estimates are more accurate:
EXPLAIN ANALYZE SELECT * FROM t3
  WHERE date_trunc('month', a) = '2020-01-01'::timestamp;

EXPLAIN ANALYZE SELECT * FROM t3
  WHERE date_trunc('day', a) BETWEEN '2020-01-01'::timestamp
                                 AND '2020-06-30'::timestamp;

EXPLAIN ANALYZE SELECT date_trunc('month', a), date_trunc('day', a)
   FROM t3 GROUP BY 1, 2;
</programlisting>

   Without expression and ndistinct statistics, the planner has no information
   about the number of distinct values for the expressions, and has to rely
   on default estimates. The equality and range conditions are assumed to have
   0.5% selectivity, and the number of distinct values in the expression is
   assumed to be the same as for the column (i.e. unique). This results in a
   significant underestimate of the row count in the first two queries. Moreover,
   the planner has no information about the relationship between the expressions,
   so it assumes the two <literal>WHERE</literal> and <literal>GROUP BY</literal>
   conditions are independent, and multiplies their selectivities together to
   arrive at a severe overestimate of the group count in the aggregate query.
   This is further exacerbated by the lack of accurate statistics for the
   expressions, forcing the planner to use a default ndistinct estimate for the
   expression derived from ndistinct for the column. With such statistics, the
   planner recognizes that the conditions are correlated, and arrives at much
   more accurate estimates.
  </para>

 </refsect1>

 <refsect1>
  <title>Compatibilité</title>

  <para>
   Il n'y a pas de commande <command>CREATE STATISTICS</command> dans le
   standard SQL.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterstatistics"/></member>
   <member><xref linkend="sql-dropstatistics"/></member>
  </simplelist>
 </refsect1>
</refentry>
