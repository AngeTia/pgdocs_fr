<?xml version="1.0" encoding="ISO-8859-15"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->
<!-- SAS 20060619 -->

<refentry id="sql-explain">
 <refmeta>
  <refentrytitle>EXPLAIN</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>EXPLAIN</refname>
  <refpurpose>Afficher le plan d'exécution d'une instruction</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>EXPLAIN [ ( { ANALYZE <replaceable class="parameter">boolean</replaceable> | VERBOSE <replaceable class="parameter">boolean</replaceable> | COSTS <replaceable class="parameter">boolean</replaceable> | BUFFERS <replaceable class="parameter">boolean</replaceable> | FORMAT { TEXT | XML | JSON | YAML } } [, ...] ) ] <replaceable class="parameter">instruction</replaceable>
EXPLAIN [ ANALYZE ] [ VERBOSE ] <replaceable class="parameter">instruction</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>
  <indexterm zone="sql-explain">
   <primary>EXPLAIN</primary>
  </indexterm>

  <indexterm zone="sql-explain">
   <primary>instructions préparées</primary>
   <secondary>afficher le plan de requête</secondary>
  </indexterm>

  <indexterm zone="sql-explain">
   <primary>curseur</primary>
   <secondary>afficher le plan de requête</secondary>
  </indexterm>

  <para>
   Cette commande affiche le plan d'exécution que l'optimiseur
   de <productname>PostgreSQL</productname> engendre pour l'instruction fournie. 
   Le plan d'exécution décrit le parcours de la (des) table(s) utilisée(s) dans
   la requête &mdash; parcours séquentiel, parcours d'index, etc. &mdash;.
   Si plusieurs tables sont référencées, il présente également les algorithmes
   de jointures utilisés pour rassembler les lignes issues des différentes
   tables.
  </para>

  <para>
   La partie la plus importante de l'affichage concerne l'affichage des coûts 
   estimés d'exécution. Ils représentent l'estimation faite par le planificateur
   des temps d'exécution de la requête (mesurés en unités de récupération de pages
   sur le disque).
   Deux nombres sont affichés&nbsp;: le temps de démarrage, écoulé avant que la première
   ligne soit renvoyée, et le temps d'exécution total, nécessaire au renvoi
   de toutes les lignes.
   Pour la plupart des requêtes, le temps qui importe est celui d'exécution totale. 
   Mais dans certains cas, tel que pour une sous-requête dans la clause
   <literal>EXISTS</literal>, le planificateur choisira le temps de démarrage le 
   plus court, et non celui d'exécution totale (car, de toute façon, l'exécuteur
   s'arrête après la récupération d'une ligne).
   De même, lors de la limitation des résultats à retourner par une
   clause <literal>LIMIT</literal>, la planificateur effectue une interpolation
   entre les deux temps limites pour choisir le plan réellement le moins coûteux.
  </para>

  <para>
   L'option <literal>ANALYZE</literal> impose l'exécution de la requête en plus de 
   sa planification. Le temps total d'exécution de chaque n&oelig;ud du plan (en millisecondes)
   et le nombre total de lignes effectivement retournées sont ajoutés à l'affichage.
   C'est utile pour vérifier la véracité des informations fournies par le planificateur.
  </para>

  <important>
   <para>
    Il ne faut pas oublier que l'instruction est réellement exécutée avec l'option
    <literal>ANALYZE</literal>. 
    Bien qu'<command>EXPLAIN</command> inhibe l'affichage des retours d'une
    commande <command>SELECT</command>, les autres effets 
    de l'instruction sont présents. Si <command>EXPLAIN ANALYZE</command> 
    doit être utilisé sur une instruction
    <command>INSERT</command>, <command>UPDATE</command>,
    <command>DELETE</command> <command>CREATE TABLE AS</command> ou
    <command>EXECUTE</command> sans que la commande
    n'affecte les données, l'approche suivante peut être envisagée&nbsp;:
<programlisting>BEGIN;
EXPLAIN ANALYZE ...;
ROLLBACK;
</programlisting>
   </para>

  <para>
   Only the <literal>ANALYZE</literal> and <literal>VERBOSE</literal> options
   can be specified, and only in that order, without surrounding the option
   list in parentheses.  Prior to <productname>PostgreSQL</productname> 9.0,
   the unparenthesized syntax was the only one supported.  It is expected that
   all new options will be supported only in the parenthesized syntax.
  </para>
  </important>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><literal>ANALYZE</literal></term>
    <listitem>
     <para>
      Exécute la commande et affiche les temps d'exécution réels. This
      parameter defaults to <literal>FALSE</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>VERBOSE</literal></term>
    <listitem>
     <para>
      Display additional information regarding the plan.  Specifically, include
      the output column list for each node in the plan tree, schema-qualify
      table and function names, always label variables in expressions with
      their range table alias, and always print the name of each trigger for
      which statistics are displayed.  This parameter defaults to
      <literal>FALSE</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>COSTS</literal></term>
    <listitem>
     <para>
      Include information on the estimated startup and total cost of each
      plan node, as well as the estimated number of rows and the estimated
      width of each row.  This parameter defaults to <literal>TRUE</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>BUFFERS</literal></term>
    <listitem>
     <para>
      Include information on buffer usage. Specifically, include the number of
      shared blocks hits, reads, and writes, the number of local blocks hits,
      reads, and writes, and the number of temp blocks reads and writes.
      Shared blocks, local blocks, and temp blocks contain tables and indexes,
      temporary tables and temporary indexes, and disk blocks used in sort and
      materialized plans, respectively. The number of blocks shown for an
      upper-level node includes those used by all its child nodes.  In text
      format, only non-zero values are printed.  This parameter may only be
      used with <literal>ANALYZE</literal> parameter.  It defaults to
      <literal>FALSE</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>FORMAT</literal></term>
    <listitem>
     <para>
      Specify the output format, which can be TEXT, XML, JSON, or YAML.
      Non-text output contains the same information as the text output
      format, but is easier for programs to parse.  This parameter defaults to
      <literal>TEXT</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">boolean</replaceable></term>
    <listitem>
     <para>
      Specifies whether the selected option should be turned on or off.
      You can write <literal>TRUE</literal>, <literal>ON</literal>, or
      <literal>1</literal> to enable the option, and <literal>FALSE</literal>,
      <literal>OFF</literal>, or <literal>0</literal> to disable it.  The
      <replaceable class="parameter">boolean</replaceable> value can also
      be omitted, in which case <literal>TRUE</literal> is assumed.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">instruction</replaceable></term>
    <listitem>
     <para>
      Toute instruction <command>SELECT</command>, <command>INSERT</command>,
      <command>UPDATE</command>, <command>DELETE</command>, <command>VALUES</command>
      <command>EXECUTE</command>, <command>DECLARE</command> ou
      <command>CREATE TABLE AS</command> dont le plan
      d'exécution est souhaité.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>Notes</title>

  <para>
   La documentation sur l'utilisation faite par l'optimiseur des informations de coût
   est assez réduite dans <productname>PostgreSQL</productname>. On peut se référer
   à <xref linkend="using-explain"/> pour plus d'informations.
  </para>
  <para>
   Pour que le planificateur de requêtes de <productname>PostgreSQL</productname>
   puisse prendre des décisions en connaissance de cause, l'instruction
   <xref linkend="sql-analyze"/> doit avoir été exécutée afin d'enregistrer 
   les statistiques de distribution des données dans la table.
   Si cela n'a pas été fait, (ou si la distribution statistique des
   données dans la table a changé de manière significative depuis
   la dernière exécution de la commande <command>ANALYZE</command>)
   les coûts estimés risquent de ne pas refléter les propriétés réelles de
   la requête. De ce fait, un plan de requête inférieur risque d'être choisi.
  </para>

  <para>
   Pour mesurer le coût d'exécution du plan d'exécution, l'implémentation
   actuelle de <command>EXPLAIN ANALYZE</command> peut ajouter un délai
   considérable à l'exécution de la requête à cause du profilage. De ce fait,
   exécuter <command>EXPLAIN ANALYZE</command> sur une requête peut prendre
   bien plus de temps que d'exécuter la requête seule. Ce délai dépend
   de la nature de la requête.
  </para>
 </refsect1>

 <refsect1>
  <title>Exemples</title>

  <para>
   Afficher le plan d'une requête simple sur une table d'une seule
   colonne de type <type>integer</type> et 10000 lignes&nbsp;:

<programlisting>EXPLAIN SELECT * FROM foo;

                       QUERY PLAN
---------------------------------------------------------
 Seq Scan on foo  (cost=0.00..155.00 rows=10000 width=4)
(1 row)
</programlisting>
  </para>

  <para>
   S'il existe un index et que la requête contient une condition
   <literal>WHERE</literal> indexable, <command>EXPLAIN</command> peut
   afficher un plan différent&nbsp;:

<programlisting>EXPLAIN SELECT * FROM foo WHERE i = 4;

                         QUERY PLAN
--------------------------------------------------------------
 Index Scan using fi on foo  (cost=0.00..5.98 rows=1 width=4)
   Index Cond: (i = 4)
(2 rows)
</programlisting>
  </para>

  <para>
   Here is the same plan with costs suppressed:

<programlisting>
EXPLAIN (COSTS FALSE) SELECT * FROM foo WHERE i = 4;

        QUERY PLAN
----------------------------
 Index Scan using fi on foo
   Index Cond: (i = 4)
(2 rows)
</programlisting>
  </para>

  <para>
   Exemple de plan de requête pour une requête utilisant une
   fonction d'agrégat&nbsp;:

<programlisting>EXPLAIN SELECT sum(i) FROM foo WHERE i &lt; 10;

                             QUERY PLAN
---------------------------------------------------------------------
 Aggregate  (cost=23.93..23.93 rows=1 width=4)
   -&gt;  Index Scan using fi on foo  (cost=0.00..23.92 rows=6 width=4)
         Index Cond: (i &lt; 10)
(3 rows)
</programlisting>
  </para>

  <para>
   Exemple d'utilisation de <command>EXPLAIN EXECUTE</command> pour
   afficher le plan d'exécution d'une requête préparée&nbsp;:

<programlisting>PREPARE query(int, int) AS SELECT sum(bar) FROM test
    WHERE id &gt; $1 AND id &lt; $2
    GROUP BY foo;

EXPLAIN ANALYZE EXECUTE query(100, 200);

                                                       QUERY PLAN
-------------------------------------------------------------------------------------
 HashAggregate  (cost=39.53..39.53 rows=1 width=8) (actual time=0.661..0.672 rows=7 loops=1)
   -&gt;  Index Scan using test_pkey on test  (cost=0.00..32.97 rows=1311 width=8) (actual time=0.050..0.395 rows=99 loops=1)
         Index Cond: ((id &gt; $1) AND (id &lt; $2))
 Total runtime: 0.851 ms
(4 rows)
</programlisting>
  </para>
  <para>
   Il est évident que les nombres présentés ici dépendent du contenu
   effectif des tables impliquées. 
   De plus, les nombres, et la stratégie sélectionnée elle-même,
   peuvent différer en fonction de la version de <productname>PostgreSQL</productname>
   du fait des améliorations apportées au planificateur.
   Il faut également savoir que la commande <command>ANALYZE</command> calcule les statistiques
   des données à partir d'extraits aléatoires&nbsp;; il est de ce fait
   possible que les coûts estimés soient modifiés après l'exécution
   de cette commande, alors même la distribution réelle des données
   dans la table n'a pas changé.
  </para>
 </refsect1>

 <refsect1>
  <title>Compatibilité</title>

  <para>
   L'instruction <command>EXPLAIN</command> n'est pas définie dans le
   standard SQL.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-analyze"/></member>
  </simplelist>
 </refsect1>
</refentry>
