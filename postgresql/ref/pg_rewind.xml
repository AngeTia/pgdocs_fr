<?xml version="1.0" encoding="UTF-8"?>
<refentry id="app-pgrewind">
 <indexterm zone="app-pgrewind">
  <primary>pg_rewind</primary>
 </indexterm>

 <refmeta>
  <refentrytitle><application>pg_rewind</application></refentrytitle>
  <manvolnum>1</manvolnum>
  <refmiscinfo>Application</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>pg_rewind</refname>
  <refpurpose>synchronise le répertoire des données de
    <productname>PostgreSQL</productname> avec un autre répertoire de données
  </refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>pg_rewind</command>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
   <group choice="plain">
    <group choice="req">
     <arg choice="plain"><option>-D </option></arg>
     <arg choice="plain"><option>--target-pgdata</option></arg>
    </group>
    <replaceable> répertoire</replaceable>
    <group choice="req">
     <arg choice="plain"><option>--source-pgdata=<replaceable>répertoire</replaceable></option></arg>
     <arg choice="plain"><option>--source-server=<replaceable>chaine_de_connexion</replaceable></option></arg>
    </group>
   </group>
  </cmdsynopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   <application>pg_rewind</application> est un outil qui permet de
   synchroniser une instance PostgreSQL avec une copie de cette même instance,
   a postériori de la séparation des timelines. Le scénario classique consiste
   à réactiver un ancien serveur primaire, après une bascule, en tant que
   serveur secondaire répliqué depuis le nouveau serveur primaire.
  </para>

  <para>
   After a successful rewind, the state of the target data directory is
   analogous to a base backup of the source data directory. Unlike taking
   a new base backup or using a tool like <application>rsync</application>,
   <application>pg_rewind</application> does not require comparing or copying
   unchanged relation blocks in the cluster. Only changed blocks from existing
   relation files are copied; all other files, including new relation files,
   configuration files, and WAL segments, are copied in full. As such the
   rewind operation is significantly faster than other approaches when the
   database is large and only a small fraction of blocks differ between the
   clusters.
  </para>

  <para>
   <application>pg_rewind</application> inspecte l'historique de la timeline
   de l'instance source et de l'instance cible pour déterminer à quel moment a
   eu lieu la séparation, et s'attend à trouver tous les fichiers WAL jusqu'au
   moment de la bascule dans le répertoire <filename>pg_wal</filename>. Le
   point de divergence peut être trouvé soit sur la ligne de temps cible, soit
   sur la ligne de temps source, soit sur leur ancêtre commun. Dans un
   scénario de bascule classique, où l'instance cible a été arrêtée peu après
   le changement, cela ne pose aucun problème. En revanche, si l'instance
   cible a travaillé un certain temps après le changement, les anciens
   fichiers WAL peuvent ne plus être présents dans le répertoire
   <filename>pg_wal</filename>. Dans ce cas, ils peuvent être copiés à la main
   depuis les fichiers WAL archivés vers le répertoire
   <filename>pg_wal</filename> or run
   <application>pg_rewind</application> with the <literal>-c</literal> option to
   automatically retrieve them from the WAL archive.
   L'utilisation de <application>pg_rewind</application> n'est pas limitée au
   failover&nbsp;: un serveur standby peut être promu, écrire quelques
   transactions, puis transformé de nouveau en standby avec cet outil.
  </para>

  <para>
   After running <application>pg_rewind</application>, WAL replay needs to
   complete for the data directory to be in a consistent state. When the
   target server is started again it will enter archive recovery and replay
   all WAL generated in the source server from the last checkpoint before
   the point of divergence. If some of the WAL was no longer available in the
   source server when <application>pg_rewind</application> was run, and
   therefore could not be copied by the <application>pg_rewind</application>
   session, it must be made available when the target server is started.
   This can be done by creating a <filename>recovery.signal</filename> file
   in the target data directory and by configuring a suitable
   <xref linkend="guc-restore-command"/> in
   <filename>postgresql.conf</filename>.
  </para>

  <para>
   <application>pg_rewind</application> nécessite que l'instance cible ait
   l'option <xref linkend="guc-wal-log-hints"/> activée dans le fichier de
   configuration <filename>postgresql.conf</filename> ou que les sommes de
   contrôle sur les données aient été activées lorsque l'instance a été
   initialisée par la commande <application>initdb</application>. Aucune de
   ces options n'est active par défaut. Le paramètre <xref
   linkend="guc-full-page-writes"/> doit lui aussi être activé. Il l'est par
   défaut.
  </para>

  <warning>
   <para>
    Si <application>pg_rewind</application> échoue lors du traitement, le
    répertoire des données de la cible est très probablement dans un état
    inutilisable. Dans ce cas, réaliser une nouvelle sauvegarde est
    recommandé.
   </para>

   <para>
    As <application>pg_rewind</application> copies configuration files
    entirely from the source, it may be required to correct the configuration
    used for recovery before restarting the target server, especially if
    the target is reintroduced as a standby of the source. If you restart
    the server after the rewind operation has finished but without configuring
    recovery, the target may again diverge from the primary.
   </para>

   <para>
    <application>pg_rewind</application> échouera immédiatement s'il trouve
    des fichiers qu'il ne peut pas modifier. Ceci peut arriver quand les
    serveurs source et cible utilisent les mêmes emplacements pour les clés et
    les certificats SSL qui sont habituellement en lecture seule. Si de tels
    fichiers sont présents sur le serveur cible, il est recommandé de les
    supprimer avant d'exécuter <application>pg_rewind</application>. Après
    l'avoir exécuté, certains de ces fichiers devront peut-être être copiés de
    la source, auquel cas il pourrait être nécessaire de supprimer les données
    copiées et de restaurer l'ensemble des liens utilisés avant l'exécution de
    l'outil.
   </para>
  </warning>
 </refsect1>

 <refsect1>
  <title>Options</title>

   <para>
    <application>pg_rewind</application> accepte les arguments suivants en
    ligne de commande&nbsp;:

    <variablelist>
     <varlistentry>
      <term><option>-D <replaceable class="parameter">répertoire</replaceable></option></term>
      <term><option>--target-pgdata=<replaceable class="parameter">répertoire</replaceable></option></term>
      <listitem>
       <para>
        Cette option définit le répertoire de données cible qui va être
        synchronisé avec le répertoire source. Cette option requiert que le
        serveur source ait été arrêté proprement.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--source-pgdata=<replaceable class="parameter">répertoire</replaceable></option></term>
      <listitem>
       <para>
        Cette option définit le répertoire de données source qui va être
        synchronisé avec le répertoire cible. Si cette option est utilisée,
        l'instance source doit être arrêtée proprement.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--source-server=<replaceable class="parameter">chaine de connexion</replaceable></option></term>
      <listitem>
       <para>
        Définit une chaine de connexion libpq permettant d'accéder à
        l'instance <productname>PostgreSQL</productname> source de façon à
        pouvoir la synchroniser avec la cible. Cette option requiert
        l'utilisation d'une connexion standard avec un rôle ayant les droits
        suffisants pour exécuter les fonctions utilisées par
        <application>pg_rewind</application> sur le serveur source (voir la
        section Notes pour les détails) ou un rôle superutilisateur.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-R</option></term>
      <term><option>--write-recovery-conf</option></term>
      <listitem>
       <para>
        Create <filename>standby.signal</filename> and append connection
        settings to <filename>postgresql.auto.conf</filename> in the output
        directory.  <literal>--source-server</literal> is mandatory with
        this option.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-n</option></term>
      <term><option>--dry-run</option></term>
      <listitem>
       <para>
        Réalise toutes les opérations sans modifier le répertoire cible.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-N</option></term>
      <term><option>--no-sync</option></term>
      <listitem>
       <para>
        Par défaut, <command>pg_rewind</command> attendra l'écriture certaine
        de tous les fichiers sur disque. Cette option permet de forcer le
        retour de <command>pg_rewind</command> sans attente, ce qui est plus
        rapide, mais signifie qu'un crash ultérieur du système d'exploitation
        pourrait laisser le répertoire des données synchronisé dans un état
        corrompu. En général, cette option est utile pour des tests, mais ne
        devrait pas être utilisée pour créer un serveur en production.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-P</option></term>
      <term><option>--progress</option></term>
      <listitem>
       <para>
        Permet d'activer les traces. Activer cette option vous fournira les
        informations au fil de l'eau sur l'avancée de la copie des données
        depuis l'instance source.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-c</option></term>
      <term><option>--restore-target-wal</option></term>
      <listitem>
       <para>
        Use <varname>restore_command</varname> defined in the target cluster
        configuration to retrieve WAL files from the WAL archive if these
        files are no longer available in the <filename>pg_wal</filename>
        directory.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--debug</option></term>
      <listitem>
       <para>
        Affiche les détails de la sortie de débogage, ce qui est surtout utile
        aux développeurs qui travaillent sur
        <application>pg_rewind</application>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--no-ensure-shutdown</option></term>
      <listitem>
       <para>
        <application>pg_rewind</application> requires that the target server
        is cleanly shut down before rewinding. By default, if the target server
        is not shut down cleanly, <application>pg_rewind</application> starts
        the target server in single-user mode to complete crash recovery first,
        and stops it.
        By passing this option, <application>pg_rewind</application> skips
        this and errors out immediately if the server is not cleanly shut
        down. Users are expected to handle the situation themselves in that
        case.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-V</option></term>
      <term><option>--version</option></term>
      <listitem>
       <para>
        Affiche les informations concernant la version, puis quitte.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-?</option></term>
      <term><option>--help</option></term>
      <listitem>
       <para>
        Affiche l'aide, puis quitte.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </para>
 </refsect1>

 <refsect1>
  <title>Environnement</title>

  <para>
   Lorsque l'option <option>--source-server</option> est utilisée,
   <application>pg_rewind</application> utilise aussi les variables
   d'environnement supportées par la bibliothèque
   <application>libpq</application> (voir <xref linkend="libpq-envars"/>).
  </para>

  <para>
   La variable d'environnement <envar>PG_COLOR</envar> indique s'il faut
   utiliser les couleurs dans les messages de diagnotiques. Les valeurs
   possibles sont <literal>always</literal>, <literal>auto</literal>,
   <literal>never</literal>.
  </para>
 </refsect1>

 <refsect1>
  <title>Notes</title>

  <para>
   Lors de l'exécution de <application>pg_rewind</application> sur une
   instance en ligne comme source, un rôle doté des droits suffisants pour
   exécuter les fonctions utilisées par <application>pg_rewind</application>
   sur l'instance source peut être utilisé à la place d'un superutilisateur.
   Voici comment créer ce rôle, nommé ici
   <literal>rewind_user</literal>&nbsp;:
<programlisting>
CREATE USER rewind_user LOGIN;
GRANT EXECUTE ON function pg_catalog.pg_ls_dir(text, boolean, boolean) TO rewind_user;
GRANT EXECUTE ON function pg_catalog.pg_stat_file(text, boolean) TO rewind_user;
GRANT EXECUTE ON function pg_catalog.pg_read_binary_file(text) TO rewind_user;
GRANT EXECUTE ON function pg_catalog.pg_read_binary_file(text, bigint, bigint, boolean) TO rewind_user;
</programlisting>  
  </para>

  <para>
   Lors de l'exécution de <application>pg_rewind</application> sur une
   instance en ligne comme source récemment promue, il est nécessaire
   d'exécuter un <command>CHECKPOINT</command> après la promotion pour que son
   fichier de contrôle reflète des informations de timeline à jour, qui est
   utilisé par <application>pg_rewind</application> pour vérifier si
   l'instance cible peut être rembobiné en utilisant l'instance source
   désignée.
  </para>

  <refsect2>
   <title>Fonctionnement</title>

   <para>
    L'idée de base est de copier toutes les modifications de fichiers au
    niveau système de fichiers de l'instance source vers l'instance
    cible&nbsp;:
   </para>

   <procedure>
    <step>
     <para>
      Parcourir les journaux de transactions de l'instance cible, en
      commençant du dernier checkpoint avant le moment où l'historique de
      timeline de l'instance source a dévié de celle de l'instance cible. Pour
      chaque enregistrement dans les journaux de transactions, enregistrer
      chaque bloc de données modifié. Ceci a pour résultat une liste de tous
      les blocs de données modifiés dans l'instance cible, après la séparation
      avec l'instance source. If some of the WAL files are no longer
      available, try re-running <application>pg_rewind</application> with
      the <option>-c</option> option to search for the missing files in
      the WAL archive.
     </para>
    </step>

    <step>
     <para>
      Copier tous les blocs modifiés de l'instance source vers l'instance
      cible, soit en utilisant un accès direct au système de fichiers
      (<option>--source-pgdata</option>) soit en SQL
      (<option>--source-server</option>).
      Relation files are now in a state equivalent to the moment of the last
      completed checkpoint prior to the point at which the WAL timelines of the
      source and target diverged plus the current state on the source of any
      blocks changed on the target after that divergence.
     </para>
    </step>

    <step>
     <para>
      Copy all other files, including new relation files, WAL segments,
      <filename>pg_xact</filename>, and configuration files from the source
      cluster to the target cluster. Similarly to base backups, the contents
      of the directories <filename>pg_dynshmem/</filename>,
      <filename>pg_notify/</filename>, <filename>pg_replslot/</filename>,
      <filename>pg_serial/</filename>, <filename>pg_snapshots/</filename>,
      <filename>pg_stat_tmp/</filename>, and <filename>pg_subtrans/</filename>
      are omitted from the data copied from the source cluster. The files
      <filename>backup_label</filename>,
      <filename>tablespace_map</filename>,
      <filename>pg_internal.init</filename>,
      <filename>postmaster.opts</filename>, and
      <filename>postmaster.pid</filename>, as well as any file or directory
      beginning with <filename>pgsql_tmp</filename>, are omitted.
     </para>
    </step>

    <step>
     <para>
      Create a <filename>backup_label</filename> file to begin WAL replay at
      the checkpoint created at failover and configure the
      <filename>pg_control</filename> file with a minimum consistency LSN
      defined as the result of <literal>pg_current_wal_insert_lsn()</literal>
      when rewinding from a live source or the last checkpoint LSN when
      rewinding from a stopped source.
     </para>
    </step>

    <step>
     <para>
      When starting the target, <productname>PostgreSQL</productname> replays
      all the required WAL, resulting in a data directory in a consistent
      state.
     </para>
    </step>
   </procedure>
  </refsect2>
 </refsect1>

</refentry>
