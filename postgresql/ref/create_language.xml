<?xml version="1.0" encoding="ISO-8859-15"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->
<!-- SAS 20060618 -->

<refentry id="sql-createlanguage">
 <refmeta>
  <refentrytitle>CREATE LANGUAGE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE LANGUAGE</refname>
  <refpurpose>Définir un nouveau langage procédural</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>CREATE [ OR REPLACE ] [ PROCEDURAL ] LANGUAGE <replaceable class="parameter">nom</replaceable>
CREATE [ OR REPLACE ] [ TRUSTED ] [ PROCEDURAL ] LANGUAGE <replaceable class="parameter">nom</replaceable>
    HANDLER <replaceable class="parameter">gestionnaire_appel</replaceable> [ VALIDATOR <replaceable>fonction_validation</replaceable> ]
</synopsis>
 </refsynopsisdiv>

 <refsect1 id="sql-createlanguage-description">
  <title>Description</title>
  <indexterm zone="sql-createlanguage">
   <primary>CREATE LANGUAGE</primary>
  </indexterm>

  <para>
   <command>CREATE LANGUAGE</command> enregistre un nouveau langage
   procédural à une base de données <productname>PostgreSQL</productname>. En
   conséquence, les fonctions et les procédures de déclencheurs peuvent être
   définies dans ce nouveau langage.
  </para>

  <para>
   <command>CREATE LANGUAGE</command> associe en fait le nom du langage à
   un ou des fonctions de gestion qui sont responsable de l'exécution des fonctions
   écrites dans le langage. <xref linkend="xplang"/> offre de plus amples
   informations sur les gestionnaires de fonctions.
  </para>

  <para>
   La commande <command>CREATE LANGUAGE</command> existe sous deux formes. Dans
   la première, l'utilisateur ne fournit que le nom du langage désiré et
   le serveur <productname>PostgreSQL</productname> consulte le catalogue
   système <link linkend="catalog-pg-pltemplate"><structname>pg_pltemplate</structname></link>
   pour déterminer les paramètres adéquats. Dans la seconde, l'utilisateur
   fournit les paramètres du langage avec son nom. Cette
   forme peut être utilisée pour créer un langage non défini dans
   <structname>pg_pltemplate</structname>. Cette approche est cependant obsolète.
  </para>

  <para>
   Si le serveur trouve une entrée dans le catalogue
   <structname>pg_pltemplate</structname> pour le nom donné, il utilise les données du
   catalogue quand bien même la commande incluerait les paramètres du langage. Ce
   comportement simplifie le chargement des anciens fichiers de sauvegarde&nbsp;; ceux-ci
   présentent le risque de contenir des informations caduques sur les fonctions de
   support du langage.
  </para>

  <para>
   Habituellement, l'utilisateur doit être un superutilisateur
   <productname>PostgreSQL</productname> pour enregistrer un nouveau langage.
   Néanmoins, le propriétaire d'une base de données peut enregistrer un
   nouveau langage dans sa base si le langage est listé dans le catalogue
   <structname>pg_pltemplate</structname> et est marqué comme autorisé à
   être créé par les propriétaires de base
   (<structfield>tmpldbacreate</structfield> à true). La valeur par défaut est
   que les langages de confiance peuvent être créés par les propriétaires de
   base de données, mais cela peut être modifié par les superutilisateurs en
   ajustant le contenu de <structname>pg_pltemplate</structname>. Le créateur
   d'un langage devient son propriétaire et peut ensuite le supprimer, le
   renommer ou le donner à un autre propriétaire.
  </para>

  <para>
   <command>CREATE OR REPLACE LANGUAGE</command> créera un nouveau langage ou
   remplacera une définition existante. Si le langage existe déjà, ces
   paramètres sont mis à jour suivant les valeurs indiquées ou prises de
   <structname>pg_pltemplate</structname> mais le propriétaire et les droits
   du langage ne sont pas modifiés et toutes fonctions existantes créées dans
   le langage sont supposées être toujours valides. En plus des droits
   nécessaires pour créer un langage, un utilisateur doit être superutilisateur
   ou propriétaire du langage existant. Le cas <literal>REPLACE</literal> a
   pour but principal d'être utilisé pour s'assurer que le langage existe. Si
   le langage a une entrée <structname>pg_pltemplate</structname> alors
   <literal>REPLACE</literal> ne modifiera rien sur la définition existante,
   sauf dans le cas inhabituel où l'entrée
   <structname>pg_pltemplate</structname> a été modifiée depuis que le langage
   a été créé.
  </para>
 </refsect1>

 <refsect1 id="sql-createlanguage-parameters">
  <title>Paramètres</title>

   <variablelist>
    <varlistentry>
     <term><literal>TRUSTED</literal></term>

     <listitem>
      <para>
       <literal>TRUSTED</literal> indique que le langage  does
       not grant access to data that the user would not otherwise
       have.
       Si ce mot clé est omis à
       l'enregistrement du langage, seuls les superutilisateurs peuvent
       utiliser ce langage pour créer de nouvelles fonctions.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>PROCEDURAL</literal></term>

     <listitem>
      <para>
       Sans objet.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">nom</replaceable></term>

     <listitem>
      <para>
       Le nom du nouveau langage procédural, insensible à la casse.
       Il ne peut y avoir deux langages portant le même nom au sein
       de la base de données.
      </para>

      <para>
       Pour des raisons de compatibilité descendante, le nom doit être entouré de
       guillemets simples.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>HANDLER</literal> <replaceable class="parameter">gestionnaire_appel</replaceable></term>

     <listitem>
      <para>
       <replaceable class="parameter">gestionnaire_appel</replaceable> est le
       nom d'une fonction précédemment enregistrée. C'est elle qui est appelée pour
       exécuter les fonctions du langage procédural. Le gestionnaire d'appels
       d'un langage procédural doit être écrit dans un langage compilé,
       tel que le C, avec la convention d'appel version 1 et enregistré dans 
       <productname>PostgreSQL</productname> comme une fonction ne prenant aucun
       argument et retournant le type <type>language_handler</type>, type
       servant essentiellement à identifier la fonction comme gestionnaire
       d'appels.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>INLINE</literal> <replaceable class="parameter">gestionnaire_en_ligne</replaceable></term>

     <listitem>
      <para>
       <replaceable class="parameter">gestionnaire_en_ligne</replaceable> est
       le nom d'une fonction déjà enregistrée qui sera appelée pour exécuter
       un bloc de code anonyme (voir la commande <xref linkend="sql-do"/>)
       dans ce langage. Si aucune fonction <replaceable
       class="parameter">gestionnaire_en_ligne</replaceable> n'est indiquée,
       le langage ne supporte pas les blocs de code anonymes. La fonction de
       gestion doit prendre un argument du type <type>internal</type>, qui
       sera la représentation interne de la commande <command>DO</command>, et
       il renverra le type <type>void</type>. La valeur de retour du
       gestionnaire est ignorée.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>VALIDATOR</literal> <replaceable class="parameter">fonction_validation</replaceable></term>

     <listitem>
      <para>
       <replaceable class="parameter">fonction_validation</replaceable> est le
       nom d'une fonction précédemment enregistrée. C'est elle qui est appelée
       pour valider toute nouvelle fonction écrite dans ce langage.
       Si aucune fonction de validation n'est spécifiée, alors toute
       nouvelle fonction n'est pas vérifiée à sa création. La fonction de
       validation prend obligatoirement un argument de type <type>oid</type>, OID de
       la fonction à créer, et renvoie par convention <type>void</type>.
      </para>

      <para>
       Une fonction de validation contrôle généralement le corps de la
       fonction pour s'assurer de sa justesse syntaxique mais peut également
       vérifier d'autres propriétés de la fonction (l'incapacité du langage
       à gérer certains types d'argument, par exemple). Le signalement d'erreur
       se fait à l'aide de la fonction <function>ereport()</function>.
       La valeur de retour de la fonction est ignorée.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

  <para>
   L'option <literal>TRUSTED</literal> et le(s) nom(s) de la fonction de support
   sont ignorés s'il existe une entrée dans la table <structname>pg_pltemplate</structname>
   pour le nom du langage spécifié.
  </para>
 </refsect1>

 <refsect1 id="sql-createlanguage-notes">
  <title>Notes</title>

  <para>
   Le programme <xref linkend="app-createlang"/> est un simple enrobage
   de la commande <command>CREATE LANGUAGE</command>. Il facilite l'installation des
   langages procéduraux à partir de la ligne de commande du shell.
  </para>

  <para>
   <xref linkend="sql-droplanguage"/>,
   ou mieux, le programme <xref linkend="app-droplang"/> sont utilisés pour supprimer
   des langages procéduraux.
  </para>

  <para>
   Le catalogue système <classname>pg_language</classname> (voir
   <xref linkend="catalog-pg-language"/>) contient des informations sur les langages
   installés. De plus, <command>createlang</command> dispose d'une
   option pour lister ces langages.
  </para>

  <para>
   Pour créer des fonctions dans un langage procédural, l'utilisateur doit
   posséder le droit <literal>USAGE</literal> pour ce langage. Par défaut,
   <literal>USAGE</literal> est donné à <literal>PUBLIC</literal> (c'est-à-dire tout le monde)
   pour les langages de confiance. Ce droit peut être révoqué si nécessaire.
  </para>

  <para>
   Les langages procéduraux sont installées par base. Néanmoins, un
   langage peut être installé dans la base de données
   <literal>template1</literal>, ce qui le rend automatiquement disponible
   dans toutes les bases de données créées par la suite.
  </para>

  <para>
   Le gestionnaire d'appels, le gestionnaire en ligne (s'il y en a un) et la
   fonction de validation (s'il y en a une) doivent
   exister préalablement si le serveur ne possède pas d'entrée pour ce langage dans
   <structname>pg_pltemplate</structname>. Dans le cas contraire, les fonctions
   n'ont pas besoin de pré-exister&nbsp;; elles sont automatiquement définies
   si elles ne sont pas présentes dans la base de données. (Cela peut amener
   <command>CREATE LANGUAGE</command> à échouer si la bibliothèque
   partagée implémentant le langage n'est pas disponible dans l'installation.)
  </para>

  <para>
   Dans les versions de <productname>PostgreSQL</productname> antérieures à
   7.3, il était nécessaire de déclarer des fonctions de gestion renvoyant
   le type <type>opaque</type>, plutôt que <type>language_handler</type>. Pour accepter
   le chargement d'anciens fichiers de sauvegarde, <command>CREATE LANGUAGE</command>
   accepte toute fonction retournant le type <type>opaque</type> mais
   affiche un message d'avertissement et modifie le type de retour de la
   fonction en <type>language_handler</type>.
  </para>
 </refsect1>

 <refsect1 id="sql-createlanguage-examples">
  <title>Exemples</title>

  <para>
   Tout langage procédural standard sera préférentiellement créé ainsi&nbsp;:
<programlisting>CREATE LANGUAGE plperl;
</programlisting>
  </para>

  <para>
   Pour un langage inconnu du catalogue <structname>pg_pltemplate</structname>, une
   séquence comme celle-ci est nécessaire&nbsp;:
<programlisting>CREATE FUNCTION plsample_call_handler() RETURNS language_handler
    AS '$libdir/plsample'
    LANGUAGE C;
CREATE LANGUAGE plsample
    HANDLER plsample_call_handler;
</programlisting>
  </para>
 </refsect1>

 <refsect1 id="sql-createlanguage-compat">
  <title>Compatibilité</title>

  <para>
   <command>CREATE LANGUAGE</command> est un extension de
   <productname>PostgreSQL</productname>.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterlanguage"/></member>
   <member><xref linkend="sql-createfunction"/></member>
   <member><xref linkend="sql-droplanguage"/></member>
   <member><xref linkend="sql-grant"/></member>
   <member><xref linkend="sql-revoke"/></member>
   <member><xref linkend="app-createlang"/></member>
   <member><xref linkend="app-droplang"/></member>
  </simplelist>
 </refsect1>
</refentry>
