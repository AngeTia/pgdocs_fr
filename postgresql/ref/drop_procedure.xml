<?xml version="1.0" encoding="UTF-8"?>
<!--
doc/src/sgml/ref/drop_procedure.sgml
PostgreSQL documentation
-->

<refentry id="sql-dropprocedure">
 <indexterm zone="sql-dropprocedure">
  <primary>DROP PROCEDURE</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>DROP PROCEDURE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Commandes du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>DROP PROCEDURE</refname>
  <refpurpose>supprimer une procédure</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <synopsis>
DROP PROCEDURE [ IF EXISTS ] <replaceable class="parameter">nom</replaceable> [ ( [ [ <replaceable class="parameter">mode_argument</replaceable> ] [ <replaceable class="parameter">nom_argument</replaceable> ] <replaceable class="parameter">type_argument</replaceable> [, ...] ] ) ] [, ...]
    [ CASCADE | RESTRICT ]
  </synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   <command>DROP PROCEDURE</command> supprime la définition d'une procédure
   existante ou de plusieurs. Pour exécuter cette commande, l'utilisateur doit être le
   propriétaire des procédures. Les types des arguments des procédures
   doivent être spécifiés, car plusieurs procédures différentes peuvent
   coexister avec le même nom et des listes d'arguments différentes.
  </para>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><literal>IF EXISTS</literal></term>
    <listitem>
     <para>
      Ne génère pas d'erreur si la procédure n'existe pas. Une notification
      est fournie dans ce cas.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom</replaceable></term>
    <listitem>
     <para>
      Le nom d'une procédure existante (éventuellement qualifié par le schéma).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">mode_argument</replaceable></term>

    <listitem>
     <para>
      Le mode d'un argument&nbsp;: <literal>IN</literal>, <literal>OUT</literal>,
      <literal>INOUT</literal> ou <literal>VARIADIC</literal>.
      Si non précisé, le défaut est <literal>IN</literal> (mais voir ci-dessous).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom_arg</replaceable></term>

    <listitem>
     <para>
      Le nom d'un argument.
      Notez que <command>DROP PROCEDURE</command> ne fait pas vraiment
      attention aux noms des arguments, puisqu'il n'a besoin que des types
      des arguments pour déterminer la procédure.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">type_argument</replaceable></term>

    <listitem>
     <para>
      Les types de données des arguments de la procédure (éventuellement
      qualifiés par le schéma), s'il y en a.
      Voir ci-dessous pour les détails.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CASCADE</literal></term>
    <listitem>
     <para>
      Supprime automatiquement les objets qui dépendent de la
      procédure, puis à leur tour tous les objets qui dépendent de ces objets.
      (voir <xref linkend="ddl-depend"/>).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RESTRICT</literal></term>
    <listitem>
     <para>
      Refuse de supprimer une procédure si un objet en dépend.
      C'est le comportement par défaut.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 id="sql-dropprocedure-notes">
  <title>Notes</title>

  <para>
   If there is only one procedure of the given name, the argument list
   can be omitted.  Omit the parentheses too in this case.
  </para>

  <para>
   In <productname>PostgreSQL</productname>, it's sufficient to list the
   input (including <literal>INOUT</literal>) arguments,
   because no two routines of the same name are allowed to share the same
   input-argument list.  Moreover, the <command>DROP</command> command
   will not actually check that you wrote the types
   of <literal>OUT</literal> arguments correctly; so any arguments that
   are explicitly marked <literal>OUT</literal> are just noise.  But
   writing them is recommendable for consistency with the
   corresponding <command>CREATE</command> command.
  </para>

  <para>
   For compatibility with the SQL standard, it is also allowed to write
   all the argument data types (including those of <literal>OUT</literal>
   arguments) without
   any <replaceable class="parameter">argmode</replaceable> markers.
   When this is done, the types of the procedure's <literal>OUT</literal>
   argument(s) <emphasis>will</emphasis> be verified against the command.
   This provision creates an ambiguity, in that when the argument list
   contains no <replaceable class="parameter">argmode</replaceable>
   markers, it's unclear which rule is intended.
   The <command>DROP</command> command will attempt the lookup both ways,
   and will throw an error if two different procedures are found.
   To avoid the risk of such ambiguity, it's recommendable to
   write <literal>IN</literal> markers explicitly rather than letting them
   be defaulted, thus forcing the
   traditional <productname>PostgreSQL</productname> interpretation to be
   used.
  </para>

  <para>
   The lookup rules just explained are also used by other commands that
   act on existing procedures, such as <command>ALTER PROCEDURE</command>
   and <command>COMMENT ON PROCEDURE</command>.
  </para>
 </refsect1>

 <refsect1 id="sql-dropprocedure-examples">
  <title>Exemples</title>

  <para>
   If there is only one procedure <literal>do_db_maintenance</literal>,
   this command is sufficient to drop it:
<programlisting>
DROP PROCEDURE do_db_maintenance;
</programlisting>
  </para>

  <para>
   Given this procedure definition:
<programlisting>
CREATE PROCEDURE do_db_maintenance(IN target_schema text, OUT results text) ...
</programlisting>
   any one of these commands would work to drop it:
 programlisting>
DROP PROCEDURE do_db_maintenance();
DROP PROCEDURE do_db_maintenance(IN target_schema text, OUT results text);
DROP PROCEDURE do_db_maintenance(IN text, OUT text);
DROP PROCEDURE do_db_maintenance(IN text);
DROP PROCEDURE do_db_maintenance(text);
DROP PROCEDURE do_db_maintenance(text, text);  -- potentially ambiguous
 /programlisting>
   However, the last example would be ambiguous if there is also, say,
<programlisting>
CREATE PROCEDURE do_db_maintenance(IN target_schema text, IN options text) ...
</programlisting>
  </para>
 </refsect1>

 <refsect1 id="sql-dropprocedure-compatibility">
  <title>Compatibilité</title>

  <para>
   Cette commande se conforme au standard SQL, avec les extensions
   <productname>PostgreSQL</productname> suivantes&nbsp;:
   <itemizedlist>
    <listitem>
     <para>Le standard n'autorise qu'une seule procédure supprimée par commande.
     </para>
    </listitem>
    <listitem>
     <para>L'option <literal>IF EXISTS</literal> est une extension.</para>
    </listitem>
    <listitem>
     <para>La capacité de spécifier les modes et noms des arguments is an
     extension, and the lookup rules differ when modes are given</para>
    </listitem>
   </itemizedlist>
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createprocedure"/></member>
   <member><xref linkend="sql-alterprocedure"/></member>
   <member><xref linkend="sql-dropfunction"/></member>
   <member><xref linkend="sql-droproutine"/></member>
  </simplelist>
 </refsect1>

</refentry>
