<?xml version="1.0" encoding="UTF-8"?>
<refentry id="sql-createsubscription">
 <indexterm zone="sql-createsubscription">
  <primary>CREATE SUBSCRIPTION</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE SUBSCRIPTION</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Ordres du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE SUBSCRIPTION</refname>
  <refpurpose>définir une nouvelle souscription</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <synopsis>
CREATE SUBSCRIPTION <replaceable class="parameter">nom_souscription</replaceable>
    CONNECTION '<replaceable class="parameter">conninfo</replaceable>'
    PUBLICATION <replaceable class="parameter">nom_publication</replaceable> [, ...]
    [ WITH ( <replaceable class="parameter">param_souscription</replaceable> [= <replaceable class="parameter">valeur</replaceable>] [, ... ] ) ]
  </synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   <command>CREATE SUBSCRIPTION</command> ajoute une nouvelle souscription de
   réplication logique. Le nom de la souscription doit être différent
   du nom de toutes les autres souscriptions existante dans la base.
  </para>

  <para>
   Une souscription représente une connexion de réplication vers un serveur
   publiant des données.
   Hence, in addition to adding definitions in the local catalogs, this
   command normally creates a replication slot on the publisher.
  </para>

  <para>
   Un worker de réplication logique sera démarré pour répliquer les données
   pour la nouvelle souscription à la vlidation de la transaction dans laquelle
   cette commande est lancée,
   unless the subscription is initially disabled.
  </para>

  <para>
   Des informations supplémentaires sur la souscription et la réplication
   logique dans son ensemble sont également disponible sur <xref
   linkend="logical-replication-subscription"/> et <xref
   linkend="logical-replication"/>.
  </para>

 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">nom_souscription</replaceable></term>
    <listitem>
     <para>
      Le nom de la nouvelle souscriptions.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CONNECTION '<replaceable class="parameter">conninfo</replaceable>'</literal></term>
    <listitem>
     <para>
      The <application>libpq</application> connection string defining how
      to connect to the publisher database. Pour plus
      de détails voir <xref linkend="libpq-connstring"/>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>PUBLICATION <replaceable class="parameter">publication_name</replaceable> [, ...]</literal></term>
    <listitem>
     <para>
      Nom des publications sur le serveur publiant les données auxquelles souscrire.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITH ( <replaceable class="parameter">param_souscription</replaceable> [= <replaceable class="parameter">valeur</replaceable>] [, ... ] )</literal></term>
    <listitem>
     <para>
      This clause specifies optional parameters for a subscription.
     </para>

     <para>
      The following parameters control what happens during subscription creation:

      <variablelist>
       <varlistentry>
        <term><literal>connect</literal> (<type>boolean</type>)</term>
        <listitem>
         <para>
          Specifies whether the <command>CREATE SUBSCRIPTION</command>
          command should connect to the publisher at all.  The default
          is <literal>true</literal>.  Setting this to
          <literal>false</literal> will force the values of
          <literal>create_slot</literal>, <literal>enabled</literal> and
          <literal>copy_data</literal> to <literal>false</literal>.
          (You cannot combine setting <literal>connect</literal>
          to <literal>false</literal> with
          setting <literal>create_slot</literal>, <literal>enabled</literal>,
          or <literal>copy_data</literal> to <literal>true</literal>.)
         </para>

         <para>
          Since no connection is made when this option is
          <literal>false</literal>, no tables are subscribed, and so
          after you enable the subscription nothing will be replicated.
          You will need to then run
          <literal>ALTER SUBSCRIPTION ... REFRESH PUBLICATION</literal>
          for tables to be subscribed.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>create_slot</literal> (<type>boolean</type>)</term>
        <listitem>
         <para>
          Spécifie si la commande devrait créer le slot de réplication sur le
          serveur publiant les données.  La valeur par défaut est
          <literal>true</literal>.
          If set to <literal>false</literal>, you are responsible for
          creating the publisher's slot in some other way.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>enabled</literal> (<type>boolean</type>)</term>
        <listitem>
         <para>
          Spécifie si la souscription devrait répliquer activement, ou si elle
          devrait uniquement configurée mais pas démarrée.  La valeur par
          défaut est <literal>true</literal>.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>slot_name</literal> (<type>string</type>)</term>
        <listitem>
         <para>
          Name of the publisher's replication slot to use.  The default is
          to use the name of the subscription for the slot name.
         </para>

         <para>
          Setting <literal>slot_name</literal> to <literal>NONE</literal>
          means there will be no replication slot
          associated with the subscription.  Use this when you will be
          creating the replication slot later manually.
          Une telle souscription doit également avoir à la fois
          <literal>enabled</literal> et <literal>create_slot</literal>
          positionnés à <literal>false</literal>.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </para>

     <para>
      The following parameters control the subscription's replication
      behavior after it has been created:

      <variablelist>

       <varlistentry>
        <term><literal>binary</literal> (<type>boolean</type>)</term>
        <listitem>
         <para>
          Specifies whether the subscription will request the publisher to
          send the data in binary format (as opposed to text).
          The default is <literal>false</literal>.
          Even when this option is enabled, only data types having
          binary send and receive functions will be transferred in binary.
         </para>

         <para>
          When doing cross-version replication, it could be that the
          publisher has a binary send function for some data type, but the
          subscriber lacks a binary receive function for that type.  In
          such a case, data transfer will fail, and
          the <literal>binary</literal> option cannot be used.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>copy_data</literal> (<type>boolean</type>)</term>
        <listitem>
         <para>
          Spécifie si les données existantes dans les publications qui sont
          en train d'être souscrites devraient être copiées une fois la
          réplication démarrée. La valeur par défaut est
          <literal>true</literal>.
         </para>
         <para>
          If the publications contain <literal>WHERE</literal> clauses, it
          will affect what data is copied. Refer to the
          <xref linkend="sql-createsubscription-notes" /> for details.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>streaming</literal> (<type>boolean</type>)</term>
        <listitem>
         <para>
          Specifies whether to enable streaming of in-progress transactions
          for this subscription.  By default, all transactions
          are fully decoded on the publisher and only then sent to the
          subscriber as a whole.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>synchronous_commit</literal> (<type>enum</type>)</term>
        <listitem>
         <para>
          La valeur de ce paramètre surcharge le paramètre
          <xref linkend="guc-synchronous-commit"/> pour les processus workers
          d'application de cette souscription. La valeur par défaut est
          <literal>off</literal>.
         </para>

         <para>
          Il est sans danger d'utiliser <literal>off</literal> pour la réplication logique&nbsp;:
          Si le souscripteur perd des transactions à cause d'une
          synchronisation manquante, les données seront renvoyée par le serveur publiant les données.
         </para>

         <para>
          Un paramétrage différent pourrait être appropriée lorsque la
          réplication logique est utilisée.  Les workers de réplication logique
          rapportent la position d'écriture et de synchronisation au serveur
          publiant les données, et lorsque la réplication synchrone est
          utilisée, le serveur publiant les données attendra la
          synchronisation.  Cela veut dire que positionner
          <literal>synchronous_commit</literal> pour le souscripteur à
          <literal>off</literal> quand la souscription est utilisée pour de la
          réplication synchrone pourrait augmenter la latence des
          <command>COMMIT</command> sur le serveur publiant les données. Dans
          ce scénario, il peut être avantageux de positionner
          <literal>synchronous_commit</literal>
          à <literal>local</literal> ou au dessus.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>two_phase</literal> (<type>boolean</type>)</term>
        <listitem>
         <para>
          Specifies whether two-phase commit is enabled for this subscription.
          La valeur par défaut est <literal>false</literal>.
         </para>

         <para>
          When two-phase commit is enabled, prepared transactions are sent
          to the subscriber at the time of <command>PREPARE
          TRANSACTION</command>, and are processed as two-phase
          transactions on the subscriber too.  Otherwise, prepared
          transactions are sent to the subscriber only when committed, and
          are then processed immediately by the subscriber.
         </para>

         <para>
          The implementation of two-phase commit requires that replication
          has successfully finished the initial table synchronization
          phase. So even when <literal>two_phase</literal> is enabled for a
          subscription, the internal two-phase state remains
          temporarily <quote>pending</quote> until the initialization phase
          completes. See column <structfield>subtwophasestate</structfield>
          of <link linkend="catalog-pg-subscription"><structname>pg_subscription</structname></link>
          to know the actual two-phase state.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>disable_on_error</literal> (<type>boolean</type>)</term>
        <listitem>
         <para>
          Specifies whether the subscription should be automatically disabled
          if any errors are detected by subscription workers during data
          replication from the publisher. The default is
          <literal>false</literal>.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 id="sql-createsubscription-notes" xreflabel="Notes">
  <title>Notes</title>

  <para>
   Voir <xref linkend="logical-replication-security"/> pour plus de
   détail sur comment configurer le contrôle d'accès entre la souscription et
   l'instance de publication.
  </para>

  <para>
   Lors de la création d'un slot de réplication (comportement par défaut),
   <command>CREATE SUBSCRIPTION</command> ne peut pas être exécuté à
   l'intérieur d'un bloc de transaction.
  </para>

  <para>
   Créer une souscription qui connecte la même instance (par exemple, pour
   répliquer entre des bases de données de la même instance ou pour répliquer
   dans la même base de données) réussira seulement si le slot de réplication
   n'est pas créé dans la même commande. Sinon, l'appel à <command>CREATE
    SUBSCRIPTION</command> va pauser. Pour le faire fonctionner, créer le slot
   de réplication séparément (en utilisant la fonction
   <function>pg_create_logical_replication_slot</function> avec le nom de
   plugin <literal>pgoutput</literal>) et créer la souscription en utilisant
   le paramètre <literal>create_slot = false</literal>. C'est une restriction
   d'implémentation qui pourrait être supprimé dans une prochaine version.
  </para>

  <para>
   If any table in the publication has a <literal>WHERE</literal> clause, rows
   for which the <replaceable class="parameter">expression</replaceable>
   evaluates to false or null will not be published. If the subscription has
   several publications in which the same table has been published with
   different <literal>WHERE</literal> clauses, a row will be published if any
   of the expressions (referring to that publish operation) are satisfied. In
   the case of different <literal>WHERE</literal> clauses, if one of the
   publications has no <literal>WHERE</literal> clause (referring to that
   publish operation) or the publication is declared as
   <literal>FOR ALL TABLES</literal> or
   <literal>FOR ALL TABLES IN SCHEMA</literal>, rows are always published
   regardless of the definition of the other expressions.
   If the subscriber is a <productname>PostgreSQL</productname> version before
   15 then any row filtering is ignored during the initial data synchronization
   phase. For this case, the user might want to consider deleting any initially
   copied data that would be incompatible with subsequent filtering.
  </para>

  <para>
   We allow non-existent publications to be specified so that users can add
   those later. This means
   <link linkend="catalog-pg-subscription"><structname>pg_subscription</structname></link>
   can have non-existent publications.
  </para>
 </refsect1>

 <refsect1>
  <title>Exemples</title>

  <para>
   Créer une souscription à un serveur distant qui réplique les tables dans la
   publication <literal>mypublication</literal> et
   <literal>insert_only</literal> et démarre la réplication immédiatement après
   le commit :
   <programlisting>
CREATE SUBSCRIPTION mysub
         CONNECTION 'host=192.168.1.50 port=5432 user=foo dbname=foodb'
        PUBLICATION mypublication, insert_only;
   </programlisting>
  </para>

  <para>
   Crée une souscription vers un serveur distant qui réplique les tables
   dans la publication <literal>insert_only</literal> et ne commence pas
   la réplication jusqu'à ce qu'elle soit activée plus tard.
   <programlisting>
CREATE SUBSCRIPTION mysub
         CONNECTION 'host=192.168.1.50 port=5432 user=foo dbname=foodb'
        PUBLICATION insert_only
               WITH (enabled = false);
   </programlisting>
  </para>
 </refsect1>

 <refsect1>
  <title>Compatibilité</title>

  <para>
   <command>CREATE SUBSCRIPTION</command> est une extension
   <productname>PostgreSQL</productname> au standard SQL.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-altersubscription"/></member>
   <member><xref linkend="sql-dropsubscription"/></member>
   <member><xref linkend="sql-createpublication"/></member>
   <member><xref linkend="sql-alterpublication"/></member>
  </simplelist>
 </refsect1>
</refentry>
