<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->

<sect1 id="ltree" xreflabel="ltree">
 <title>ltree</title>

 <indexterm zone="ltree">
  <primary>ltree</primary>
 </indexterm>

 <para>
  Ce module implémente le type de données <type>ltree</type> pour représenter
  des labels de données stockés dans une structure hiérarchique de type arbre.
  Des fonctionnalités étendues de recherche sont fournies.
 </para>

 <para>
  This module is considered <quote>trusted</quote>, that is, it can be
  installed by non-superusers who have <literal>CREATE</literal> privilege
  on the current database.
 </para>

 <sect2>
  <title>Définitions</title>

  <para>
   Un <firstterm>label</firstterm> est une séquence de caractères
   alphanumériques et de tirets bas (par exemple, dans la locale C, les
   caractères <literal>A-Za-z0-9_</literal> sont autorisés). La longueur d'un
   label est limité par 256 caractères.
  </para>

  <para>
   Exemples&nbsp;: <literal>42</literal>, <literal>Personal_Services</literal>
  </para>

  <para>
   Le <firstterm>chemin de label</firstterm> est une séquence de zéro
   ou plusieurs labels séparés par des points, par exemple
   <literal>L1.L2.L3</literal>, ce qui représente le chemin de la racine
   jusqu'à un nœud particulier. La longueur d'un chemin
   est limité à 65535 labels.
  </para>

  <para>
   Exemple&nbsp;: <literal>Top.Countries.Europe.Russia</literal>
  </para>

  <para>
   Le module <filename>ltree</filename> fournit plusieurs types de
   données&nbsp;:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     <type>ltree</type> stocke un chemin de label.
    </para>
   </listitem>

   <listitem>
    <para>
     <type>lquery</type> représente un type d'expression rationnelle du chemin
     pour la correspondance de valeurs de type <type>ltree</type>. Un mot
     simple établit une correspondance avec ce label dans un chemin. Le
     caractère joker (<literal>*</literal>) est utilisé pour spécifier tout
     nombre de labels (niveaux). These can be joined with dots to form a pattern that
     must match the whole label path. Par exemple&nbsp;:
     <synopsis>
foo         <lineannotation>Correspond au chemin exact <literal>foo</literal></lineannotation>
*.foo.*     <lineannotation>Correspond à tout chemin contenant le label <literal>foo</literal></lineannotation>
*.foo       <lineannotation>Correspond à tout chemin dont le dernier label est
<literal>foo</literal></lineannotation>
     </synopsis>
    </para>

    <para>
     Les caractères joker et les mots simples peuvent être quantifiés pour
     restreindre le nombre de labels de la correspondance&nbsp;:
     <synopsis>
*{<replaceable>n</replaceable>}        <lineannotation>Correspond à exactement <replaceable>n</replaceable> labels</lineannotation>
*{<replaceable>n</replaceable>,}       <lineannotation>Correspond à au moins <replaceable>n</replaceable> labels</lineannotation>
*{<replaceable>n</replaceable>,<replaceable>m</replaceable>}      <lineannotation>Correspond à au moins <replaceable>n</replaceable> labels mais à pas plus de <replaceable>m</replaceable></lineannotation>
*{,<replaceable>m</replaceable>}       <lineannotation>Match at most <replaceable>m</replaceable> labels &mdash; same as </lineannotation>*{0,<replaceable>m</replaceable>}
foo{<replaceable>n</replaceable>,<replaceable>m</replaceable>}    <lineannotation>Match at least <replaceable>n</replaceable> but not more than <replaceable>m</replaceable> occurrences of <literal>foo</literal></lineannotation>
foo{,}      <lineannotation>Match any number of occurrences of <literal>foo</literal>, including zero</lineannotation>
 </synopsis>
     In the absence of any explicit quantifier, the default for a star symbol
     is to match any number of labels (that is, <literal>{,}</literal>) while
     the default for a non-star item is to match exactly once (that
     is, <literal>{1}</literal>).
     
    </para>

    <para>
     Il existe plusieurs modificateurs qui peuvent être placés à la fin
     d'un élément <type>lquery</type> sans joker pour que la
     correspondance se fasse sur plus que la correspondance exacte&nbsp;:
     <synopsis>
@           <lineannotation>Correspondance sans vérification de casse, par exemple <literal>a@</literal> établit une correspondance avec <literal>A</literal></lineannotation>
*           <lineannotation>Correspondance d'un préfixe pour un label, par exemple <literal>foo*</literal> établit une correspondance avec <literal>foobar</literal></lineannotation>
%           <lineannotation>Correspondance avec les mots séparés par des tirets bas</lineannotation>
     </synopsis>
     Le comportement de <literal>%</literal> est un peu complexe. Il tente
     d'établir une correspondance avec des mots plutôt qu'avec un label
     complet. Par exemple, <literal>foo_bar%</literal> établit une
     correspondance avec <literal>foo_bar_baz</literal> mais pas avec
     <literal>foo_barbaz</literal>. S'il est combiné avec
     <literal>*</literal>, la correspondance du préfixe s'applique à chaque
     mot séparément. Par exemple, <literal>foo_bar%*</literal> établit une
     correspondance avec <literal>foo1_bar2_baz</literal>, mais pas avec
     <literal>foo1_br2_baz</literal>.
    </para>

    <para>
     Also, you can write several possibly-modified non-star items separated with
     <literal>|</literal> (OR) to match any of those items, and you can put
     <literal>!</literal> (NOT) at the start of a non-star group to match any
     label that doesn't match any of the alternatives.  A quantifier, if any,
     goes at the end of the group; it means some number of matches for the
     group as a whole (that is, some number of labels matching or not matching
     any of the alternatives).
    </para>

    <para>
     Voici un exemple annoté d'une <type>lquery</type>&nbsp;:
     <programlisting>
Top.*{0,2}.sport*@.!football|tennis{1,}.Russ*|Spain
a.  b.     c.      d.                   e.
     </programlisting>
     Cette requête établira une correspondance avec tout chemin qui&nbsp;:
    </para>
    <orderedlist numeration='loweralpha'>
     <listitem>
      <para>
       commence avec le label <literal>Top</literal>
      </para>
     </listitem>
     <listitem>
      <para>
       et suit avec zéro ou deux labels jusqu'à
      </para>
     </listitem>
     <listitem>
      <para>
       un label commençant avec le préfixe <literal>sport</literal> quelque
       soit la casse
      </para>
     </listitem>
     <listitem>
      <para>
       then has one or more labels, none of which
       match <literal>football</literal> nor <literal>tennis</literal>
      </para>
     </listitem>
     <listitem>
      <para>
       et se termine enfin avec un label commençant par
       <literal>Russ</literal> ou correspond strictement à
       <literal>Spain</literal>.
      </para>
     </listitem>
    </orderedlist>
   </listitem>

   <listitem>
    <para><type>ltxtquery</type> represente en quelque sorte une recherche
     plein texte pour la correspondance de valeurs <type>ltree</type>. Une
     valeur <type>ltxtquery</type> contient des mots, quelque fois avec
     les modificateurs <literal>@</literal>, <literal>*</literal>,
     <literal>%</literal> à la fin&nbsp;; les modifications ont la même
     signification que dans un <type>lquery</type>. Les mots peuvent être
     combinés avec <literal>&amp;</literal> (AND), <literal>|</literal> (OR),
     <literal>!</literal> (NOT) et des parenthèses. La différence clé d'une
     <type>lquery</type> est que <type>ltxtquery</type> établit une
     correspondance avec des mots sans relation avec leur position dans
     le chemin de labels.
    </para>

    <para>
     Voici un exemple de <type>ltxtquery</type>&nbsp;:
     <programlisting>
     Europe &amp; Russia*@ &amp; !Transportation
     </programlisting>
     Ceci établira une correspondance avec les chemins contenant le label
     <literal>Europe</literal> et tout label commençant par
     <literal>Russia</literal> (quelque soit la casse), mais pas les chemins
     contenant le label <literal>Transportation</literal>. L'emplacement de
     ces mots dans le chemin n'est pas important. De plus, quand
     <literal>%</literal> est utilisé, le mot peut établir une correspondance
     avec tout mot séparé par un tiret bas dans un label, quelque soit sa
     position.
    </para>
   </listitem>

  </itemizedlist>

  <para>
   Note&nbsp;: <type>ltxtquery</type> autorise un espace blanc entre des
   symboles mais <type>ltree</type> et <type>lquery</type> ne le permettent
   pas.
  </para>
 </sect2>

 <sect2>
  <title>Opérateurs et fonctions</title>

  <para>
   Le type <type>ltree</type> dispose des opérateurs de comparaison habituels
   <literal>=</literal>, <literal>&lt;&gt;</literal>, <literal>&lt;</literal>,
   <literal>&gt;</literal>, <literal>&lt;=</literal>, <literal>&gt;=</literal>.
   Les comparaisons trient dans l'ordre du parcours d'un arbre, avec les
   enfants d'un nœud trié par le texte du label. De plus, les opérateurs
   spécialisés indiqués dans <xref linkend="ltree-op-table"/> sont
   disponibles.
  </para>

  <table id="ltree-op-table">
   <title>Opérateurs <type>ltree</type></title>

    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        Opérateur
       </para>
       <para>
        Description
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>ltree</type> <literal>@&gt;</literal> <type>ltree</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        L'argument gauche est-il un ancêtre de l'argument droit (ou
        identique)&nbsp;?
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>ltree</type> <literal>&lt;@</literal> <type>ltree</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        L'argument gauche est-il un descendant de l'argument droit (ou
        identique)&nbsp;?
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>ltree</type> <literal>~</literal> <type>lquery</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para role="func_signature">
        <type>lquery</type> <literal>~</literal> <type>ltree</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Est-ce que <type>ltree</type> établie une correspondance avec
       <type>lquery</type>&nbsp;??
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>ltree</type> <literal>?</literal> <type>lquery[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para role="func_signature">
        <type>lquery[]</type> <literal>?</literal> <type>ltree</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Est-ce que <type>ltree</type> établie une correspondance avec au moins un
        <type>lquery</type> dans ce tableau&nbsp;?
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>ltree</type> <literal>@</literal> <type>ltxtquery</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para role="func_signature">
        <type>ltxtquery</type> <literal>@</literal> <type>ltree</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Est-ce que <type>ltree</type> établie une correspondance avec
       <type>ltxtquery</type>&nbsp;?
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>ltree</type> <literal>||</literal> <type>ltree</type>
        <returnvalue>ltree</returnvalue>
       </para>
       <para>
        Concatène des chemins <type>ltree</type>.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>ltree</type> <literal>||</literal> <type>text</type>
        <returnvalue>ltree</returnvalue>
       </para>
       <para role="func_signature">
        <type>text</type> <literal>||</literal> <type>ltree</type>
        <returnvalue>ltree</returnvalue>
       </para>
       <para>
        Convertit du texte en <type>ltree</type> et concatène.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>ltree[]</type> <literal>@&gt;</literal> <type>ltree</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para role="func_signature">
        <type>ltree</type> <literal>&lt;@</literal> <type>ltree[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Est-ce que le tableau contient un ancêtre de
       <type>ltree</type>&nbsp;?
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>ltree[]</type> <literal>&lt;@</literal> <type>ltree</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para role="func_signature">
        <type>ltree</type> <literal>@&gt;</literal> <type>ltree[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Est-ce que le tableau contient un descendant de
        <type>ltree</type>&nbsp;??
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>ltree[]</type> <literal>~</literal> <type>lquery</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para role="func_signature">
        <type>lquery</type> <literal>~</literal> <type>ltree[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Est-ce que le tableau contient au moins un chemin correspondant à
        <type>lquery</type>&nbsp;??
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>ltree[]</type> <literal>?</literal> <type>lquery[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para role="func_signature">
        <type>lquery[]</type> <literal>?</literal> <type>ltree[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Est-ce que le tableau <type>ltree</type> contient au moins un chemin
        correspondant à un <type>lquery</type>&nbsp;?
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>ltree[]</type> <literal>@</literal> <type>ltxtquery</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para role="func_signature">
        <type>ltxtquery</type> <literal>@</literal> <type>ltree[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Est-ce que le tableau contient au moins un chemin correspondant à
        <type>ltxtquery</type>&nbsp;??
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>ltree[]</type> <literal>?@&gt;</literal> <type>ltree</type>
        <returnvalue>ltree</returnvalue>
       </para>
       <para>
        Renvoie la première entrée du tableau ancêtre de
        <type>ltree</type> ou NULL sinon.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>ltree[]</type> <literal>?&lt;@</literal> <type>ltree</type>
        <returnvalue>ltree</returnvalue>
       </para>
       <para>
        Renvoie la première entrée du tableau qui est un descendant de
        <type>ltree</type> ou NULL sinon.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>ltree[]</type> <literal>?~</literal> <type>lquery</type>
        <returnvalue>ltree</returnvalue>
       </para>
       <para>
        Renvoie la première entrée du tableau établissant une correspondance avec
        <type>lquery</type> et NULL sinon.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>ltree[]</type> <literal>?@</literal> <type>ltxtquery</type>
        <returnvalue>ltree</returnvalue>
       </para>
       <para>
        Renvoie la première entrée du tableau établissant une correspondance avec
        <type>ltxtquery</type> et NULL sinon.
       </para></entry>
      </row>
     </tbody>
    </tgroup>
  </table>

  <para>
   Lesopérateurs operators <literal>&lt;@</literal>, <literal>@&gt;</literal>,
   <literal>@</literal> et <literal>~</literal> ont des versions analogues
   <literal>^&lt;@</literal>, <literal>^@&gt;</literal>, <literal>^@</literal>,
   <literal>^~</literal>, qui sont identiques sauf qu'elles n'utilisent pas les
   index. Elles sont utiles pour tester.
  </para>

  <para>
   Les fonctions disponibles sont indiquées dans
   <xref linkend="ltree-func-table"/>.
  </para>

  <table id="ltree-func-table">
   <title>Fonctions <type>ltree</type></title>

    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        Function
       </para>
       <para>
        Description
       </para>
       <para>
        Example(s)
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>subltree</primary></indexterm>
        <function>subltree</function> ( <type>ltree</type>, <parameter>start</parameter> <type>integer</type>, <parameter>end</parameter> <type>integer</type> )
        <returnvalue>ltree</returnvalue>
       </para>
       <para>
        Returns subpath of <type>ltree</type> from
        position <parameter>start</parameter> to
        position <parameter>end</parameter>-1 (counting from 0).
       </para>
       <para>
        <literal>subltree('Top.Child1.Child2',1,2)</literal>
        <returnvalue>Child1</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>subpath</primary></indexterm>
        <function>subpath</function> ( <type>ltree</type>, <parameter>offset</parameter> <type>integer</type>, <parameter>len</parameter> <type>integer</type> )
        <returnvalue>ltree</returnvalue>
       </para>
       <para>
        Returns subpath of <type>ltree</type> starting at
        position <parameter>offset</parameter>, with
        length <parameter>len</parameter>.  If <parameter>offset</parameter>
        is negative, subpath starts that far from the end of the path.
        If <parameter>len</parameter> is negative, leaves that many labels off
        the end of the path.
       </para>
       <para>
        <literal>subpath('Top.Child1.Child2',0,2)</literal>
        <returnvalue>Top.Child1</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>subpath</function> ( <type>ltree</type>, <parameter>offset</parameter> <type>integer</type> )
        <returnvalue>ltree</returnvalue>
       </para>
       <para>
        Returns subpath of <type>ltree</type> starting at
        position <parameter>offset</parameter>, extending to end of path.
        If <parameter>offset</parameter> is negative, subpath starts that far
        from the end of the path.
       </para>
       <para>
        <literal>subpath('Top.Child1.Child2',1)</literal>
        <returnvalue>Child1.Child2</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>nlevel</primary></indexterm>
        <function>nlevel</function> ( <type>ltree</type> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        Returns number of labels in path.
       </para>
       <para>
        <literal>nlevel('Top.Child1.Child2')</literal>
        <returnvalue>3</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>index</primary></indexterm>
        <function>index</function> ( <parameter>a</parameter> <type>ltree</type>, <parameter>b</parameter> <type>ltree</type> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        Returns position of first occurrence of <parameter>b</parameter> in
        <parameter>a</parameter>, or -1 if not found.
       </para>
       <para>
        <literal>index('0.1.2.3.5.4.5.6.8.5.6.8','5.6')</literal>
        <returnvalue>6</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>index</function> ( <parameter>a</parameter> <type>ltree</type>,  <parameter>b</parameter> <type>ltree</type>, <parameter>offset</parameter> <type>integer</type> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        Returns position of first occurrence of <parameter>b</parameter>
        in <parameter>a</parameter>, or -1 if not found.  The search starts at
        position <parameter>offset</parameter>;
        negative <parameter>offset</parameter> means
        start <parameter>-offset</parameter> labels from the end of the path.
       </para>
       <para>
        <literal>index('0.1.2.3.5.4.5.6.8.5.6.8','5.6',-4)</literal>
        <returnvalue>9</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>text2ltree</primary></indexterm>
        <function>text2ltree</function> ( <type>text</type> )
        <returnvalue>ltree</returnvalue>
       </para>
       <para>
        Casts <type>text</type> to <type>ltree</type>.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>ltree2text</primary></indexterm>
        <function>ltree2text</function> ( <type>ltree</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
        Casts <type>ltree</type> to <type>text</type>.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>lca</primary></indexterm>
        <function>lca</function> ( <type>ltree</type> <optional>, <type>ltree</type> <optional>, ... </optional></optional> )
        <returnvalue>ltree</returnvalue>
       </para>
       <para>
        Computes longest common ancestor of paths
        (up to 8 arguments are supported).
       </para>
       <para>
        <literal>lca('1.2.3','1.2.3.4.5.6')</literal>
        <returnvalue>1.2</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>lca</function> ( <type>ltree[]</type> )
        <returnvalue>ltree</returnvalue>
       </para>
       <para>
        Computes longest common ancestor of paths in array.
       </para>
       <para>
        <literal>lca(array['1.2.3'::ltree,'1.2.3.4'])</literal>
        <returnvalue>1.2</returnvalue>
       </para></entry>
      </row>
     </tbody>
    </tgroup>
  </table>
 </sect2>

 <sect2>
  <title>Index</title>
  <para>
   <filename>ltree</filename> accepte différents types d'index pouvant
   améliorer les performances des oopérateurs indiqués&nbsp;:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Index B-tree sur <type>ltree</type>&nbsp;:
     <literal>&lt;</literal>, <literal>&lt;=</literal>, <literal>=</literal>,
     <literal>&gt;=</literal>, <literal>&gt;</literal>
    </para>
   </listitem>
   <listitem>
    <para>
     Index GiST sur <type>ltree</type> (<literal>gist_ltree_ops</literal>
     opclass)&nbsp;:
     <literal>&lt;</literal>, <literal>&lt;=</literal>, <literal>=</literal>,
     <literal>&gt;=</literal>, <literal>&gt;</literal>,
     <literal>@&gt;</literal>, <literal>&lt;@</literal>,
     <literal>@</literal>, <literal>~</literal>, <literal>?</literal>
    </para>
    <para>
     <literal>gist_ltree_ops</literal> GiST opclass approximates a set of
     path labels as a bitmap signature.  Its optional integer parameter
     <literal>siglen</literal> determines the
     signature length in bytes.  The default signature length is 8 bytes.
     Valid values of signature length are between 1 and 2024 bytes.  Longer
     signatures lead to a more precise search (scanning a smaller fraction of the index and
     fewer heap pages), at the cost of a larger index.
    </para>
    <para>
     Example of creating such an index with the default signature length of 8 bytes:
    </para>
    <programlisting>
     CREATE INDEX path_gist_idx ON test USING GIST (path);
</programlisting>
    <para>
     Example of creating such an index with a signature length of 100 bytes:
    </para>
<programlisting>
CREATE INDEX path_gist_idx ON test USING GIST (path gist_ltree_ops(siglen=100));
    </programlisting>
   </listitem>
   <listitem>
    <para>
     Index GiST sur <type>ltree[]</type> (<literal>gist__ltree_ops</literal>
     opclass)&nbsp;:
     <literal>ltree[] &lt;@ ltree</literal>, <literal>ltree @&gt; ltree[]</literal>,
     <literal>@</literal>, <literal>~</literal>, <literal>?</literal>
    </para>
    <para>
     <literal>gist__ltree_ops</literal> GiST opclass works similarly to
     <literal>gist_ltree_ops</literal> and also takes signature length as
     a parameter.  The default value of <literal>siglen</literal> in
      <literal>gist__ltree_ops</literal> is 28 bytes.
    </para>
    <para>
     Example of creating such an index with the default signature length of 28 bytes:
    </para>
    <programlisting>
     CREATE INDEX path_gist_idx ON test USING GIST (array_path);
    </programlisting>
    <para>
     Note&nbsp;: ce type d'index est à perte.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2>
  <title>Exemple</title>

  <para>
   Cet exemple utilise les données suivantes (disponibles dans le fichier
   <filename>contrib/ltree/ltreetest.sql</filename> des sources)&nbsp;:
  </para>

  <programlisting>
CREATE TABLE test (path ltree);
INSERT INTO test VALUES ('Top');
INSERT INTO test VALUES ('Top.Science');
INSERT INTO test VALUES ('Top.Science.Astronomy');
INSERT INTO test VALUES ('Top.Science.Astronomy.Astrophysics');
INSERT INTO test VALUES ('Top.Science.Astronomy.Cosmology');
INSERT INTO test VALUES ('Top.Hobbies');
INSERT INTO test VALUES ('Top.Hobbies.Amateurs_Astronomy');
INSERT INTO test VALUES ('Top.Collections');
INSERT INTO test VALUES ('Top.Collections.Pictures');
INSERT INTO test VALUES ('Top.Collections.Pictures.Astronomy');
INSERT INTO test VALUES ('Top.Collections.Pictures.Astronomy.Stars');
INSERT INTO test VALUES ('Top.Collections.Pictures.Astronomy.Galaxies');
INSERT INTO test VALUES ('Top.Collections.Pictures.Astronomy.Astronauts');
CREATE INDEX path_gist_idx ON test USING GIST (path);
CREATE INDEX path_idx ON test USING BTREE (path);
  </programlisting>

  <para>
   Maintenant, nous avons une table <structname>test</structname> peuplée
   avec des données décrivant la hiérarchie ci-dessous&nbsp;:
  </para>

  <programlisting>
                            Top
                         /   |  \
                 Science Hobbies Collections
                     /       |              \
            Astronomy   Amateurs_Astronomy Pictures
               /  \                            |
    Astrophysics  Cosmology                Astronomy
                                            /  |    \
                                     Galaxies Stars Astronauts
  </programlisting>

  <para>
   Nous pouvons faire de l'héritage&nbsp;:
  </para>

  <screen>
ltreetest=&gt; SELECT path FROM test WHERE path &lt;@ 'Top.Science';
                path
------------------------------------
 Top.Science
 Top.Science.Astronomy
 Top.Science.Astronomy.Astrophysics
 Top.Science.Astronomy.Cosmology
(4 rows)
  </screen>

  <para>
   Voici quelques exemples de correspondance de chemins&nbsp;:
  </para>

  <screen>
ltreetest=&gt; SELECT path FROM test WHERE path ~ '*.Astronomy.*';
                     path
-----------------------------------------------
 Top.Science.Astronomy
 Top.Science.Astronomy.Astrophysics
 Top.Science.Astronomy.Cosmology
 Top.Collections.Pictures.Astronomy
 Top.Collections.Pictures.Astronomy.Stars
 Top.Collections.Pictures.Astronomy.Galaxies
 Top.Collections.Pictures.Astronomy.Astronauts
(7 rows)

ltreetest=&gt; SELECT path FROM test WHERE path ~ '*.!pictures@.Astronomy.*';
                path
------------------------------------
 Top.Science.Astronomy
 Top.Science.Astronomy.Astrophysics
 Top.Science.Astronomy.Cosmology
(3 rows)
  </screen>

  <para>
   Voici quelques exemples de recherche plein texte&nbsp;:
  </para>
  <screen>
ltreetest=&gt; SELECT path FROM test WHERE path @ 'Astro*% &amp; !pictures@';
                path
------------------------------------
 Top.Science.Astronomy
 Top.Science.Astronomy.Astrophysics
 Top.Science.Astronomy.Cosmology
 Top.Hobbies.Amateurs_Astronomy
(4 rows)

ltreetest=&gt; SELECT path FROM test WHERE path @ 'Astro* &amp; !pictures@';
                path
------------------------------------
 Top.Science.Astronomy
 Top.Science.Astronomy.Astrophysics
 Top.Science.Astronomy.Cosmology
(3 rows)
  </screen>

  <para>
   Construction d'un chemin en utilisant les fonctions&nbsp;:
  </para>
  <screen>
ltreetest=&gt; SELECT subpath(path,0,2)||'Space'||subpath(path,2) FROM test WHERE path &lt;@ 'Top.Science.Astronomy';
                 ?column?
------------------------------------------
 Top.Science.Space.Astronomy
 Top.Science.Space.Astronomy.Astrophysics
 Top.Science.Space.Astronomy.Cosmology
(3 rows)
  </screen>

  <para>
   Nous pouvons simplifier ceci en créant une fonction SQL qui insère un
   label à une position spécifié dans un chemin&nbsp;:
  </para>
  <screen>
CREATE FUNCTION ins_label(ltree, int, text) RETURNS ltree
    AS 'select subpath($1,0,$2) || $3 || subpath($1,$2);'
    LANGUAGE SQL IMMUTABLE;

ltreetest=&gt; SELECT ins_label(path,2,'Space') FROM test WHERE path &lt;@ 'Top.Science.Astronomy';
                ins_label
------------------------------------------
 Top.Science.Space.Astronomy
 Top.Science.Space.Astronomy.Astrophysics
 Top.Science.Space.Astronomy.Cosmology
(3 rows)
  </screen>
 </sect2>

 <sect2>
  <title>Transformations</title>

  <para>
   Des extensions supplémentaires sont disponibles pour implémenter des
   transformations pour le type <type>ltree</type> pour PL/Python. Les
   extensions sont appelées <literal>ltree_plpythonu</literal>,
   <literal>ltree_plpython2u</literal> et <literal>ltree_plpython3u</literal>
   (voir <xref linkend="plpython-python23"/> pour la convention de nommage
   PL/Python). Si vous installez ces transformations et les spécifier lors de
   la création d'une fonction, les valeurs <type>ltree</type> sont converties
   en listes Python. Il est à noter que l'inverse n'est pas encore supportée.
  </para>

  <caution>
   <para>
    Il est fortement recommandé que les extensions de transformation soient
    installées dans le même schéma que <filename>ltree</filename>. Sinon il
    existe un risque de sécurité si le schéma de l'extension de transformation
    contient des objets définis par un utilisateur hostile.
   </para>
  </caution>
 </sect2>

 <sect2>
  <title>Auteurs</title>

  <para>
   Tout le travail a été réalisé par Teodor Sigaev
   (<email>teodor@stack.net</email>) et Oleg Bartunov
   (<email>oleg@sai.msu.su</email>). Voir
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist"></ulink> pour des
   informations supplémentaires. Les auteurs voudraient remercier Eugeny
   Rodichev pour son aide. Commentaires et rapports de bogue sont les
   bienvenus.
  </para>
 </sect2>

</sect1>
